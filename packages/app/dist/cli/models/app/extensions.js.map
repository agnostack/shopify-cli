{"version":3,"file":"extensions.js","sourceRoot":"","sources":["../../../../src/cli/models/app/extensions.ts"],"names":[],"mappings":"","sourcesContent":["import {ExtensionFlavorValue} from '../../services/generate/extension.js'\nimport {BaseConfigType} from '../extensions/schemas.js'\nimport {ExtensionFeature} from '../extensions/specification.js'\nimport {FunctionConfigType} from '../extensions/specifications/function.js'\nimport {TokenizedString} from '@shopify/cli-kit/node/output'\nimport {Result} from '@shopify/cli-kit/node/result'\n\nexport type ExtensionCategory = 'ui' | 'function' | 'theme'\n\nexport interface ExtensionFlavor {\n  name: string\n  value: ExtensionFlavorValue\n  path?: string\n}\n\nexport interface Extension {\n  idEnvironmentVariableName: string\n  localIdentifier: string\n  configurationPath: string\n  directory: string\n  type: string\n  externalType: string\n  graphQLType: string\n  publishURL(options: {orgId: string; appId: string; extensionId?: string}): Promise<string>\n  features: ExtensionFeature[]\n}\n\nexport type FunctionExtension = Extension & {\n  configuration: FunctionConfigType\n  entrySourceFilePath?: string\n  buildCommand: string | undefined\n  buildWasmPath: string\n  inputQueryPath: string\n  isJavaScript: boolean\n  usingExtensionsFramework: boolean\n}\n\nexport type ThemeExtension = Extension & {\n  configuration: BaseConfigType\n  previewMessage(url: string, storeFqdn: string): TokenizedString | undefined\n  outputBundlePath: string\n}\n\nexport type UIExtension<TConfiguration extends BaseConfigType = BaseConfigType> = Extension & {\n  configuration: TConfiguration\n  entrySourceFilePath?: string\n  outputBundlePath: string\n  devUUID: string\n  surface: string\n  dependency?: string\n  getBundleExtensionStdinContent(): string\n  validate(): Promise<Result<unknown, string>>\n  preDeployValidation(): Promise<void>\n  buildValidation(): Promise<void>\n  deployConfig(): Promise<{[key: string]: unknown}>\n  previewMessage(url: string, storeFqdn: string): TokenizedString | undefined\n  shouldFetchCartUrl(): boolean\n  hasExtensionPointTarget(target: string): boolean\n  isPreviewable: boolean\n}\n"]}