{"version":3,"file":"function.js","sourceRoot":"","sources":["../../../../../src/cli/models/extensions/specifications/function.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,4BAA4B,EAAC,MAAM,qBAAqB,CAAA;AAChE,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAA;AACxC,OAAO,EAAC,uBAAuB,EAAC,MAAM,uBAAuB,CAAA;AAC7D,OAAO,EAAC,GAAG,EAAC,MAAM,8BAA8B,CAAA;AAGhD,MAAM,CAAC,MAAM,uBAAuB,GAAG,UAAU,CAAC,MAAM,CAAC;IACvD,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC;QAChB,OAAO,EAAE,GAAG;aACT,MAAM,EAAE;aACR,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aAC/D,QAAQ,EAAE;QACb,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;KAC9B,CAAC;IACF,eAAe,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;IACvD,EAAE,EAAE,GAAG;SACJ,MAAM,CAAC;QACN,aAAa,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;QACvC,KAAK,EAAE,GAAG;aACP,MAAM,CAAC;YACN,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE;YACpB,OAAO,EAAE,GAAG,CAAC,MAAM,EAAE;SACtB,CAAC;aACD,QAAQ,EAAE;KACd,CAAC;SACD,QAAQ,EAAE;IACb,UAAU,EAAE,GAAG,CAAC,MAAM,EAAE;IACxB,KAAK,EAAE,GAAG;SACP,MAAM,CAAC;QACN,SAAS,EAAE,GAAG;aACX,MAAM,CAAC;YACN,SAAS,EAAE,GAAG,CAAC,MAAM,EAAE;YACvB,GAAG,EAAE,GAAG,CAAC,MAAM,EAAE;SAClB,CAAC;aACD,QAAQ,EAAE;KACd,CAAC;SACD,QAAQ,EAAE;CACd,CAAC,CAAA;AAEF,MAAM,IAAI,GAAG,4BAA4B,CAAC;IACxC,UAAU,EAAE,UAAU;IACtB,qBAAqB,EAAE;QACrB,iBAAiB;QACjB,0BAA0B;QAC1B,gBAAgB;QAChB,wBAAwB;QACxB,uBAAuB;QACvB,mBAAmB;QACnB,oBAAoB;QACpB,yBAAyB;KAC1B;IACD,OAAO,EAAE,OAAO;IAChB,eAAe,EAAE,KAAK;IACtB,MAAM,EAAE,uBAAuB;IAC/B,gBAAgB,EAAE,uBAAuB;IACzC,qBAAqB,EAAE,UAAU;IACjC,WAAW,EAAE,UAAU;IACvB,aAAa,EAAE,KAAK;IACpB,iBAAiB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC;CACvC,CAAC,CAAA;AAEF,eAAe,IAAI,CAAA","sourcesContent":["import {createExtensionSpecification} from '../specification.js'\nimport {BaseSchema} from '../schemas.js'\nimport {defaultFunctionsFlavors} from '../../../constants.js'\nimport {zod} from '@shopify/cli-kit/node/schema'\n\nexport type FunctionConfigType = zod.infer<typeof FunctionExtensionSchema>\nexport const FunctionExtensionSchema = BaseSchema.extend({\n  build: zod.object({\n    command: zod\n      .string()\n      .transform((value) => (value.trim() === '' ? undefined : value))\n      .optional(),\n    path: zod.string().optional(),\n  }),\n  configurationUi: zod.boolean().optional().default(true),\n  ui: zod\n    .object({\n      enable_create: zod.boolean().optional(),\n      paths: zod\n        .object({\n          create: zod.string(),\n          details: zod.string(),\n        })\n        .optional(),\n    })\n    .optional(),\n  apiVersion: zod.string(),\n  input: zod\n    .object({\n      variables: zod\n        .object({\n          namespace: zod.string(),\n          key: zod.string(),\n        })\n        .optional(),\n    })\n    .optional(),\n})\n\nconst spec = createExtensionSpecification({\n  identifier: 'function',\n  additionalIdentifiers: [\n    'order_discounts',\n    'cart_checkout_validation',\n    'cart_transform',\n    'delivery_customization',\n    'payment_customization',\n    'product_discounts',\n    'shipping_discounts',\n    'fulfillment_constraints',\n  ],\n  surface: 'admin',\n  singleEntryPath: false,\n  schema: FunctionExtensionSchema,\n  supportedFlavors: defaultFunctionsFlavors,\n  partnersWebIdentifier: 'function',\n  graphQLType: 'function',\n  isPreviewable: false,\n  appModuleFeatures: (_) => ['function'],\n})\n\nexport default spec\n"]}