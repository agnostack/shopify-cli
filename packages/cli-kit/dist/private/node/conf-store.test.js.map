{"version":3,"file":"conf-store.test.js","sourceRoot":"","sources":["../../../src/private/node/conf-store.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {ConfSchema, cacheRetrieveOrRepopulate, getSession, removeSession, setSession} from './conf-store.js'\nimport {LocalStorage} from '../../public/node/local-storage.js'\nimport {describe, expect, test} from 'vitest'\nimport {inTemporaryDirectory} from '@shopify/cli-kit/node/fs'\n\ndescribe('getSession', () => {\n  test('returns the content of the SessionStore key', async () => {\n    await inTemporaryDirectory(async (cwd) => {\n      // Given\n      const config = new LocalStorage<ConfSchema>({cwd})\n      config.set('sessionStore', 'my-session')\n\n      // When\n      const got = getSession(config)\n\n      // Then\n      expect(got).toEqual('my-session')\n    })\n  })\n})\n\ndescribe('setSession', () => {\n  test('saves the desired content in the SessionStore key', async () => {\n    await inTemporaryDirectory(async (cwd) => {\n      // Given\n      const config = new LocalStorage<ConfSchema>({cwd})\n      config.set('sessionStore', 'my-session')\n\n      // When\n      setSession('my-session', config)\n\n      // Then\n      expect(config.get('sessionStore')).toEqual('my-session')\n    })\n  })\n})\n\ndescribe('removeSession', () => {\n  test('removes the SessionStore key', async () => {\n    await inTemporaryDirectory(async (cwd) => {\n      // Given\n      const config = new LocalStorage<ConfSchema>({cwd})\n      config.set('sessionStore', 'my-session')\n\n      // When\n      removeSession(config)\n\n      // Then\n      expect(config.get('sessionStore')).toEqual(undefined)\n    })\n  })\n})\n\ndescribe('cacheRetrieveOrRepopulate', () => {\n  test('returns the cached contents when they exist', async () => {\n    await inTemporaryDirectory(async (cwd) => {\n      // Given\n      const config = new LocalStorage<ConfSchema>({cwd})\n      const cacheValue = {\n        'identity-introspection-url-IDENTITYURL': {value: 'URL1', timestamp: Date.now()},\n      }\n      config.set('cache', cacheValue)\n\n      // When\n      const got = await cacheRetrieveOrRepopulate(\n        'identity-introspection-url-IDENTITYURL',\n        async () => 'URL2',\n        60 * 1000,\n        config,\n      )\n\n      // Then\n      // Uses the prior run to return the cached value\n      expect(got).toEqual('URL1')\n    })\n  })\n\n  test('derives the cached contents when the cache is not populated', async () => {\n    await inTemporaryDirectory(async (cwd) => {\n      // Given\n      const config = new LocalStorage<ConfSchema>({cwd})\n\n      // When\n      const got = await cacheRetrieveOrRepopulate(\n        'identity-introspection-url-IDENTITYURL',\n        async () => 'URL1',\n        60 * 1000,\n        config,\n      )\n\n      // Then\n      expect(got).toEqual('URL1')\n    })\n  })\n\n  test('re-derives the cached contents when the cache is outdated', async () => {\n    await inTemporaryDirectory(async (cwd) => {\n      // Given\n      const config = new LocalStorage<ConfSchema>({cwd})\n      const cacheValue = {\n        'identity-introspection-url-IDENTITYURL': {value: 'URL1', timestamp: Date.now() - 60 * 1000},\n      }\n      config.set('cache', cacheValue)\n\n      // When\n      const got = await cacheRetrieveOrRepopulate(\n        'identity-introspection-url-IDENTITYURL',\n        async () => 'URL2',\n        0,\n        config,\n      )\n\n      // Then\n      // Fetches a new value because the old one is outdated per the current request\n      expect(got).toEqual('URL2')\n    })\n  })\n\n  test('re-derives the cached contents when the cache is invalid', async () => {\n    await inTemporaryDirectory(async (cwd) => {\n      // Given\n      const config = new LocalStorage<any>({cwd})\n      const cacheValue = {'identity-introspection-url-IDENTITYURL': {value: undefined, timestamp: Date.now()}}\n      config.set('cache', cacheValue)\n\n      // When\n      const got = await cacheRetrieveOrRepopulate(\n        'identity-introspection-url-IDENTITYURL',\n        async () => 'URL2',\n        60 * 1000,\n        config,\n      )\n\n      // Then\n      // Fetches a new value because the old one is wrong\n      expect(got).toEqual('URL2')\n    })\n  })\n})\n"]}