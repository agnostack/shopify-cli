{"version":3,"file":"service.test.js","sourceRoot":"","sources":["../../../../src/private/node/context/service.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAE,kBAAkB,EAAC,MAAM,cAAc,CAAA;AAC5D,OAAO,EAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAC,MAAM,QAAQ,CAAA;AAE7C,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,CAAC,6EAA6E,EAAE,GAAG,EAAE;QACvF,QAAQ;QACR,MAAM,GAAG,GAAG,EAAC,mBAAmB,EAAE,OAAO,EAAC,CAAA;QAE1C,OAAO;QACP,MAAM,GAAG,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAA;QAEnC,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;IACrC,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,2EAA2E,EAAE,GAAG,EAAE;QACrF,QAAQ;QACR,MAAM,GAAG,GAAG,EAAC,mBAAmB,EAAE,MAAM,EAAC,CAAA;QAEzC,OAAO;QACP,MAAM,GAAG,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAA;QAEnC,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;IACpC,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,uFAAuF,EAAE,GAAG,EAAE;QACjG,QAAQ;QACR,MAAM,GAAG,GAAG,EAAC,mBAAmB,EAAE,YAAY,EAAC,CAAA;QAE/C,OAAO;QACP,MAAM,GAAG,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAA;QAEnC,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAA;IAC1C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,gEAAgE,EAAE,GAAG,EAAE;QAC1E,QAAQ;QACR,MAAM,GAAG,GAAG,EAAE,CAAA;QAEd,OAAO;QACP,MAAM,GAAG,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAA;QAEnC,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAA;IAC1C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC5D,QAAQ;QACR,MAAM,GAAG,GAAG,EAAC,IAAI,EAAE,GAAG,EAAC,CAAA;QAEvB,OAAO;QACP,MAAM,GAAG,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAA;QAEnC,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;IACpC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {Environment, serviceEnvironment} from './service.js'\nimport {expect, test, describe} from 'vitest'\n\ndescribe('serviceEnvironment', () => {\n  test('returns local when the environment variable points to the local environment', () => {\n    // Given\n    const env = {SHOPIFY_SERVICE_ENV: 'local'}\n\n    // When\n    const got = serviceEnvironment(env)\n\n    // Then\n    expect(got).toBe(Environment.Local)\n  })\n\n  test('returns Spin when the environment variable points to the spin environment', () => {\n    // Given\n    const env = {SHOPIFY_SERVICE_ENV: 'spin'}\n\n    // When\n    const got = serviceEnvironment(env)\n\n    // Then\n    expect(got).toBe(Environment.Spin)\n  })\n\n  test('returns Production when the environment variable points to the production environment', () => {\n    // Given\n    const env = {SHOPIFY_SERVICE_ENV: 'production'}\n\n    // When\n    const got = serviceEnvironment(env)\n\n    // Then\n    expect(got).toBe(Environment.Production)\n  })\n\n  test(\"returns Production when the environment variable doesn't exist\", () => {\n    // Given\n    const env = {}\n\n    // When\n    const got = serviceEnvironment(env)\n\n    // Then\n    expect(got).toBe(Environment.Production)\n  })\n\n  test('returns spin when environment variable SPIN is 1', () => {\n    // Given\n    const env = {SPIN: '1'}\n\n    // When\n    const got = serviceEnvironment(env)\n\n    // Then\n    expect(got).toBe(Environment.Spin)\n  })\n})\n"]}