{"version":3,"file":"authorize.test.js","sourceRoot":"","sources":["../../../../src/private/node/session/authorize.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {authorize} from './authorize.js'\nimport {clientId} from './identity.js'\nimport {listenRedirect} from './redirect-listener.js'\nimport {randomHex, base64URLEncode} from '../../../public/node/crypto.js'\nimport {openURL} from '../../../public/node/system.js'\nimport {identityFqdn} from '../../../public/node/context/fqdn.js'\nimport {CancelExecution} from '../../../public/node/error.js'\nimport {renderConfirmationPrompt} from '../../../public/node/ui.js'\nimport {checkPort} from 'get-port-please'\nimport {killPortProcess} from 'kill-port-process'\n\nimport {describe, test, expect, vi} from 'vitest'\n\nvi.mock('../../../public/node/system.js')\nvi.mock('./redirect-listener')\nvi.mock('../../../public/node/crypto.js')\nvi.mock('../../../public/node/ui.js')\nvi.mock('../../../public/node/context/fqdn.js')\nvi.mock('./identity')\nvi.mock('get-port-please')\nvi.mock('kill-port-process')\n\nconst port = 3456\nconst host = '127.0.0.1'\n\ndescribe('authorize', () => {\n  test('authorizes the user through the browser', async () => {\n    // Given\n    const challenge = {\n      codeChallenge: 'challenge',\n      codeVerifier: 'verifier',\n    }\n    vi.mocked(checkPort).mockResolvedValue(port)\n    vi.mocked(randomHex).mockReturnValue('hex')\n    vi.mocked(base64URLEncode).mockReturnValueOnce('verifier')\n    vi.mocked(base64URLEncode).mockReturnValueOnce('challenge')\n    vi.mocked(listenRedirect).mockResolvedValue({code: 'code', state: 'state'})\n    vi.mocked(identityFqdn).mockResolvedValue('fqdn.com')\n    vi.mocked(clientId).mockReturnValue('clientId')\n\n    // When\n    const got = await authorize(['scope1', 'scope2'], 'state')\n\n    // Then\n    const url =\n      'http://fqdn.com/oauth/authorize?client_id=clientId&scope=scope1+scope2&redirect_uri=http%3A%2F%2F127.0.0.1%3A3456&state=state&response_type=code&code_challenge_method=S256&code_challenge=challenge'\n\n    expect(openURL).toHaveBeenCalledWith(url)\n    expect(listenRedirect).toHaveBeenCalledWith(host, port, url)\n    expect(got).toEqual({code: 'code', codeVerifier: challenge.codeVerifier})\n  })\n\n  test('throws error if the returned state is not valid', async () => {\n    // Given\n    vi.mocked(checkPort).mockResolvedValue(port)\n    vi.mocked(randomHex).mockReturnValue('hex')\n    vi.mocked(listenRedirect).mockResolvedValue({code: 'code', state: 'bad'})\n\n    // When\n    const auth = () => authorize(['scope1', 'scope2'], 'state')\n\n    // Then\n    await expect(auth).rejects.toThrowError(/authentication doesn't match/)\n  })\n\n  test('throws cancel execution exception if the port used for listening for the authorization response is already in use and the user do not want to terminate the process', async () => {\n    // Given\n    vi.mocked(checkPort).mockResolvedValue(false)\n    vi.mocked(renderConfirmationPrompt).mockResolvedValue(false)\n\n    // When\n    const auth = authorize(['scope1', 'scope2'], 'state')\n\n    // Then\n    await expect(auth).rejects.toThrowError(new CancelExecution())\n    expect(killPortProcess).toBeCalledTimes(0)\n  })\n\n  test('terminate process if the port used for listing for the authorization response is already in use and the user confirm to terminate the process', async () => {\n    // Given\n    const challenge = {\n      codeChallenge: 'challenge',\n      codeVerifier: 'verifier',\n    }\n    vi.mocked(randomHex).mockReturnValue('hex')\n    vi.mocked(base64URLEncode).mockReturnValueOnce('verifier')\n    vi.mocked(base64URLEncode).mockReturnValueOnce('challenge')\n    vi.mocked(listenRedirect).mockResolvedValue({code: 'code', state: 'state'})\n    vi.mocked(identityFqdn).mockResolvedValue('fqdn.com')\n    vi.mocked(clientId).mockReturnValue('clientId')\n    vi.mocked(checkPort).mockResolvedValue(false)\n    vi.mocked(renderConfirmationPrompt).mockResolvedValue(true)\n\n    // When\n    const got = await authorize(['scope1', 'scope2'], 'state')\n\n    // Then\n    const url =\n      'http://fqdn.com/oauth/authorize?client_id=clientId&scope=scope1+scope2&redirect_uri=http%3A%2F%2F127.0.0.1%3A3456&state=state&response_type=code&code_challenge_method=S256&code_challenge=challenge'\n\n    expect(openURL).toHaveBeenCalledWith(url)\n    expect(listenRedirect).toHaveBeenCalledWith(host, port, url)\n    expect(got).toEqual({code: 'code', codeVerifier: challenge.codeVerifier})\n    expect(killPortProcess).toHaveBeenCalledOnce()\n  })\n})\n"]}