{"version":3,"file":"device-authorization.test.js","sourceRoot":"","sources":["../../../../src/private/node/session/device-authorization.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DeviceAuthorizationResponse,\n  pollForDeviceAuthorization,\n  requestDeviceAuthorization,\n} from './device-authorization.js'\nimport {clientId} from './identity.js'\nimport {IdentityToken} from './schema.js'\nimport {exchangeDeviceCodeForAccessToken} from './exchange.js'\nimport {identityFqdn} from '../../../public/node/context/fqdn.js'\nimport {shopifyFetch} from '../../../public/node/http.js'\nimport {err, ok} from '../../../public/node/result.js'\nimport {describe, expect, test, vi} from 'vitest'\nimport {Response} from 'node-fetch'\n\nvi.mock('../../../public/node/context/fqdn.js')\nvi.mock('./identity')\nvi.mock('../../../public/node/http.js')\nvi.mock('./exchange.js')\n\ndescribe('requestDeviceAuthorization', () => {\n  const data: any = {\n    device_code: 'device_code',\n    user_code: 'user_code',\n    verification_uri: 'verification_uri',\n    expires_in: 3600,\n    verification_uri_complete: 'verification_uri_complete',\n    interval: 5,\n  }\n\n  const dataExpected: DeviceAuthorizationResponse = {\n    deviceCode: data.device_code,\n    userCode: data.user_code,\n    verificationUri: data.verification_uri,\n    expiresIn: data.expires_in,\n    verificationUriComplete: data.verification_uri_complete,\n    interval: data.interval,\n  }\n\n  test('requests an authorization code to initiate the device auth', async () => {\n    // Given\n    const response = new Response(JSON.stringify(data))\n    vi.mocked(shopifyFetch).mockResolvedValue(response)\n    vi.mocked(identityFqdn).mockResolvedValue('fqdn.com')\n    vi.mocked(clientId).mockResolvedValue('clientId')\n\n    // When\n    const got = await requestDeviceAuthorization(['scope1', 'scope2'])\n\n    // Then\n    expect(shopifyFetch).toBeCalledWith('https://fqdn.com/oauth/device_authorization', {\n      method: 'POST',\n      headers: {'Content-type': 'application/x-www-form-urlencoded'},\n      body: 'client_id=clientId&scope=scope1 scope2',\n    })\n    expect(got).toEqual(dataExpected)\n  })\n})\n\ndescribe('pollForDeviceAuthorization', () => {\n  const identityToken: IdentityToken = {\n    accessToken: 'access_token',\n    refreshToken: 'refresh_token',\n    expiresAt: new Date(2022, 1, 1, 11),\n    scopes: ['scope', 'scope2'],\n  }\n\n  test('poll until a valid token is received', async () => {\n    // Given\n    vi.mocked(exchangeDeviceCodeForAccessToken).mockResolvedValueOnce(err('authorization_pending'))\n    vi.mocked(exchangeDeviceCodeForAccessToken).mockResolvedValueOnce(err('authorization_pending'))\n    vi.mocked(exchangeDeviceCodeForAccessToken).mockResolvedValueOnce(err('authorization_pending'))\n    vi.mocked(exchangeDeviceCodeForAccessToken).mockResolvedValueOnce(ok(identityToken))\n\n    // When\n    const got = await pollForDeviceAuthorization('device_code', 0.05)\n\n    // Then\n    expect(exchangeDeviceCodeForAccessToken).toBeCalledTimes(4)\n    expect(got).toEqual(identityToken)\n  })\n\n  test('when polling, if an error is received, stop polling and throw error', async () => {\n    // Given\n    vi.mocked(exchangeDeviceCodeForAccessToken).mockResolvedValueOnce(err('authorization_pending'))\n    vi.mocked(exchangeDeviceCodeForAccessToken).mockResolvedValueOnce(err('authorization_pending'))\n    vi.mocked(exchangeDeviceCodeForAccessToken).mockResolvedValueOnce(err('access_denied'))\n\n    // When\n    const got = pollForDeviceAuthorization('device_code', 0.05)\n\n    // Then\n    await expect(got).rejects.toThrow()\n    expect(exchangeDeviceCodeForAccessToken).toBeCalledTimes(3)\n  })\n})\n"]}