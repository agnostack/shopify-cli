{"version":3,"file":"exchange.test.js","sourceRoot":"","sources":["../../../../src/private/node/session/exchange.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  exchangeAccessForApplicationTokens,\n  exchangeCodeForAccessToken,\n  InvalidGrantError,\n  InvalidRequestError,\n  refreshAccessToken,\n} from './exchange.js'\nimport {applicationId, clientId} from './identity.js'\nimport {IdentityToken} from './schema.js'\nimport {shopifyFetch} from '../../../public/node/http.js'\nimport {identityFqdn} from '../../../public/node/context/fqdn.js'\nimport {describe, test, expect, vi, afterAll, beforeEach} from 'vitest'\nimport {Response} from 'node-fetch'\nimport {AbortError} from '@shopify/cli-kit/node/error'\n\nconst currentDate = new Date(2022, 1, 1, 10)\nconst expiredDate = new Date(2022, 1, 1, 11)\n\nconst data: any = {\n  access_token: 'access_token',\n  refresh_token: 'refresh_token',\n  scope: 'scope scope2',\n  expires_in: 3600,\n}\n\nconst identityToken: IdentityToken = {\n  accessToken: data.access_token,\n  refreshToken: data.refresh_token,\n  expiresAt: expiredDate,\n  scopes: data.scope.split(' '),\n}\n\nvi.mock('../../../public/node/http.js')\nvi.mock('../../../public/node/context/fqdn.js')\nvi.mock('./identity')\n\nbeforeEach(() => {\n  vi.mocked(clientId).mockReturnValue('clientId')\n  vi.setSystemTime(currentDate)\n  vi.mocked(applicationId).mockImplementation((api) => api)\n  vi.mocked(identityFqdn).mockResolvedValue('fqdn.com')\n})\n\nafterAll(() => {\n  // Restore Date mock\n  vi.useRealTimers()\n})\n\ndescribe('exchange code for identity token', () => {\n  const code = {code: 'code', codeVerifier: 'verifier'}\n\n  test('obtains an identity token from a authorization code', async () => {\n    // Given\n    const response = new Response(JSON.stringify(data))\n    vi.mocked(shopifyFetch).mockResolvedValue(response)\n\n    // When\n    const got = await exchangeCodeForAccessToken(code)\n\n    // Then\n    expect(shopifyFetch).toBeCalledWith(\n      'https://fqdn.com/oauth/token?grant_type=authorization_code&code=code&redirect_uri=http%3A%2F%2F127.0.0.1%3A3456&client_id=clientId&code_verifier=verifier',\n      {method: 'POST'},\n    )\n    expect(got).toEqual(identityToken)\n  })\n\n  test('Throws HTTP error if the request fails', () => {\n    // Given\n    const responseBody = {\n      error: 'invalid_grant',\n      error_description: 'Invalid grant',\n    }\n    const response = new Response(JSON.stringify(responseBody), {status: 500})\n    vi.mocked(shopifyFetch).mockResolvedValue(response)\n\n    // When\n    const got = () => exchangeCodeForAccessToken(code)\n\n    // Then\n    return expect(got).rejects.toThrowError()\n  })\n})\n\ndescribe('exchange identity token for application tokens', () => {\n  const scopes = {admin: [], partners: [], storefront: []}\n\n  test('returns tokens for all APIs if a store is passed', async () => {\n    // Given\n    const response = new Response(JSON.stringify(data))\n\n    // Need to do it 3 times because a Response can only be used once\n    vi.mocked(shopifyFetch)\n      .mockResolvedValue(response)\n      .mockResolvedValueOnce(response.clone())\n      .mockResolvedValueOnce(response.clone())\n\n    // When\n    const got = await exchangeAccessForApplicationTokens(identityToken, scopes, 'storeFQDN')\n\n    // Then\n    const expected = {\n      partners: {\n        accessToken: 'access_token',\n        expiresAt: expiredDate,\n        scopes: ['scope', 'scope2'],\n      },\n      'storefront-renderer': {\n        accessToken: 'access_token',\n        expiresAt: expiredDate,\n        scopes: ['scope', 'scope2'],\n      },\n      'storeFQDN-admin': {\n        accessToken: 'access_token',\n        expiresAt: expiredDate,\n        scopes: ['scope', 'scope2'],\n      },\n    }\n    expect(got).toEqual(expected)\n  })\n\n  test('does not return token for admin if there is no store', async () => {\n    // Given\n    const response = new Response(JSON.stringify(data))\n\n    // Need to do it 3 times because a Response can only be used once\n    vi.mocked(shopifyFetch)\n      .mockResolvedValue(response)\n      .mockResolvedValueOnce(response.clone())\n      .mockResolvedValueOnce(response.clone())\n\n    // When\n    const got = await exchangeAccessForApplicationTokens(identityToken, scopes, undefined)\n\n    // Then\n    const expected = {\n      partners: {\n        accessToken: 'access_token',\n        expiresAt: expiredDate,\n        scopes: ['scope', 'scope2'],\n      },\n      'storefront-renderer': {\n        accessToken: 'access_token',\n        expiresAt: expiredDate,\n        scopes: ['scope', 'scope2'],\n      },\n    }\n    expect(got).toEqual(expected)\n  })\n})\n\ndescribe('refresh access tokens', () => {\n  test('throws a InvalidGrantError when Identity returns invalid_grant', async () => {\n    // Given\n    const error = {error: 'invalid_grant'}\n    const response = new Response(JSON.stringify(error), {status: 400})\n    vi.mocked(shopifyFetch).mockResolvedValue(response)\n\n    // When\n    const got = () => refreshAccessToken(identityToken)\n\n    // Then\n    return expect(got).rejects.toThrowError(InvalidGrantError)\n  })\n\n  test('throws a InvalidRequestError when Identity returns invalid_request', async () => {\n    // Given\n    const error = {error: 'invalid_request'}\n    const response = new Response(JSON.stringify(error), {status: 400})\n    vi.mocked(shopifyFetch).mockResolvedValue(response)\n\n    // When\n    const got = () => refreshAccessToken(identityToken)\n\n    // Then\n    return expect(got).rejects.toThrowError(InvalidRequestError)\n  })\n\n  test('throws an AbortError when Identity returns another error', async () => {\n    // Given\n    const error = {error: 'another'}\n    const response = new Response(JSON.stringify(error), {status: 400})\n    vi.mocked(shopifyFetch).mockResolvedValue(response)\n\n    // When\n    const got = () => refreshAccessToken(identityToken)\n\n    // Then\n    return expect(got).rejects.toThrowError(AbortError)\n  })\n})\n"]}