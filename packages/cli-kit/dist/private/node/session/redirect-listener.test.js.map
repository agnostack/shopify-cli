{"version":3,"file":"redirect-listener.test.js","sourceRoot":"","sources":["../../../../src/private/node/session/redirect-listener.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {RedirectListener} from './redirect-listener.js'\nimport {describe, test, vi, expect} from 'vitest'\nimport {createServer} from 'http'\n\nvi.mock('http')\n\ndescribe('RedirectListener', () => {\n  test('starts and stops the server', async () => {\n    // Given\n    const server: any = {\n      listen: vi.fn(),\n      close: vi.fn(),\n    }\n    vi.mocked(createServer).mockReturnValue(server)\n    const subject = new RedirectListener({\n      port: 3000,\n      host: 'localhost',\n      callback: (_code, _error) => {},\n    })\n\n    // When\n    await subject.start()\n\n    // Then\n    const listenCalls = vi.mocked(server.listen).mock.calls\n\n    expect(listenCalls.length).toEqual(1)\n    expect(listenCalls[0][0]).toEqual({port: 3000, host: 'localhost'})\n    expect(listenCalls[0][1]).toBeTypeOf('function')\n  })\n\n  test('stops the server', async () => {\n    // Given\n    const server: any = {\n      listen: vi.fn(),\n      close: vi.fn(),\n    }\n    vi.mocked(createServer).mockReturnValue(server)\n    const subject = new RedirectListener({\n      port: 3000,\n      host: 'localhost',\n      callback: (_code, _error) => {},\n    })\n\n    // When/Then\n    await expect(subject.stop()).resolves.toBeUndefined()\n    const closeCalls = vi.mocked(server.close).mock.calls\n    expect(closeCalls.length).toEqual(1)\n  })\n\n  test('stops error when the server fails to stop', async () => {\n    // Given\n    const server: any = {\n      listen: vi.fn(),\n      close: vi.fn(),\n    }\n    vi.mocked(createServer).mockReturnValue(server)\n    const subject = new RedirectListener({\n      port: 3000,\n      host: 'localhost',\n      callback: (_code, _error) => {},\n    })\n\n    // When/Then\n    await expect(subject.stop()).resolves.toBeUndefined()\n    const closeCalls = vi.mocked(server.close).mock.calls\n    expect(closeCalls.length).toEqual(1)\n  })\n})\n"]}