{"version":3,"file":"store.test.js","sourceRoot":"","sources":["../../../../src/private/node/session/store.test.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAC,MAAM,YAAY,CAAA;AAC/C,OAAO,EAAC,UAAU,EAAE,aAAa,EAAE,UAAU,EAAC,MAAM,kBAAkB,CAAA;AACtE,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAC,MAAM,QAAQ,CAAA;AAEjD,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;AAE3B,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACrB,IAAI,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QACjE,QAAQ;QACR,MAAM,OAAO,GAAG,WAAW,EAAE,CAAA;QAE7B,OAAO;QACP,MAAM,KAAK,CAAC,OAAO,CAAC,CAAA;QAEpB,OAAO;QACP,MAAM,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAA;IACvC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACrB,IAAI,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACxD,OAAO;QACP,MAAM,KAAK,EAAE,CAAA;QAEb,OAAO;QACP,MAAM,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAA;IACvC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QAC3D,OAAO;QACP,MAAM,MAAM,EAAE,CAAA;QAEd,OAAO;QACP,MAAM,CAAC,aAAa,CAAC,CAAC,gBAAgB,EAAE,CAAA;IAC1C,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,SAAS,WAAW;IAClB,MAAM,SAAS,GAAqB;QAClC,WAAW,EAAE,QAAQ;QACrB,SAAS,EAAE,IAAI,IAAI,EAAE;QACrB,MAAM,EAAE,EAAE;KACX,CAAA;IACD,OAAO;QACL,sBAAsB,EAAE;YACtB,QAAQ,EAAE;gBACR,WAAW,EAAE,aAAa;gBAC1B,YAAY,EAAE,cAAc;gBAC5B,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,MAAM,EAAE,CAAC,KAAK,CAAC;aAChB;YACD,YAAY,EAAE;gBACZ,QAAQ,EAAE,SAAS;gBACnB,WAAW,EAAE,SAAS;gBACtB,qBAAqB,EAAE,SAAS;aACjC;SACF;KACF,CAAA;AACH,CAAC","sourcesContent":["import {ApplicationToken, Session} from './schema.js'\nimport {store, fetch, remove} from './store.js'\nimport {getSession, removeSession, setSession} from '../conf-store.js'\nimport {describe, expect, vi, test} from 'vitest'\n\nvi.mock('../conf-store.js')\n\ndescribe('store', () => {\n  test('saves the serialized session to the local store', async () => {\n    // Given\n    const session = testSession()\n\n    // When\n    await store(session)\n\n    // Then\n    expect(setSession).toHaveBeenCalled()\n  })\n})\n\ndescribe('fetch', () => {\n  test('reads the session from the local store', async () => {\n    // When\n    await fetch()\n\n    // Then\n    expect(getSession).toHaveBeenCalled()\n  })\n})\n\ndescribe('remove', () => {\n  test('removes the session from the secure store', async () => {\n    // When\n    await remove()\n\n    // Then\n    expect(removeSession).toHaveBeenCalled()\n  })\n})\n\nfunction testSession(): Session {\n  const testToken: ApplicationToken = {\n    accessToken: 'access',\n    expiresAt: new Date(),\n    scopes: [],\n  }\n  return {\n    'accounts.shopify.com': {\n      identity: {\n        accessToken: 'accessToken',\n        refreshToken: 'refreshToken',\n        expiresAt: new Date(),\n        scopes: ['foo'],\n      },\n      applications: {\n        adminApi: testToken,\n        partnersApi: testToken,\n        storefrontRendererApi: testToken,\n      },\n    },\n  }\n}\n"]}