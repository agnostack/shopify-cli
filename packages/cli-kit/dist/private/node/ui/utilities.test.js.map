{"version":3,"file":"utilities.test.js","sourceRoot":"","sources":["../../../../src/private/node/ui/utilities.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAC,MAAM,gBAAgB,CAAA;AACrD,OAAO,EAAC,iBAAiB,EAAC,MAAM,+BAA+B,CAAA;AAC/D,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAC,MAAM,QAAQ,CAAA;AAE7C,QAAQ,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;IAC5C,IAAI,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;QAC/E,MAAM,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAC1E,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,yEAAyE,EAAE,KAAK,IAAI,EAAE;QACzF,MAAM,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,CAAC,EAAC,SAAS,EAAE,MAAM,EAAC,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;IAChH,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACzE,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,CAAC,EAAC,SAAS,EAAE,MAAM,EAAC,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;IAC/G,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;QACpE,MAAM,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAC1E,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {messageWithPunctuation} from './utilities.js'\nimport {tokenItemToString} from './components/TokenizedText.js'\nimport {describe, expect, test} from 'vitest'\n\ndescribe('messageWithPunctuation', async () => {\n  test(\"doesn't append a colon if the token ends with a question mark\", async () => {\n    expect(tokenItemToString(messageWithPunctuation('test?'))).toBe('test?')\n  })\n\n  test(\"doesn't append a colon if the array of tokens ends with a question mark\", async () => {\n    expect(tokenItemToString(messageWithPunctuation([{userInput: 'test'}, {filePath: 'asd?'}]))).toBe('test asd?')\n  })\n\n  test('appends a colon to the end of a single token', async () => {\n    expect(tokenItemToString(messageWithPunctuation('test'))).toBe('test:')\n  })\n\n  test('appends a colon to the end of an array of tokens', async () => {\n    expect(tokenItemToString(messageWithPunctuation([{userInput: 'test'}, {filePath: 'asd'}]))).toBe('test asd:')\n  })\n\n  test(\"doesn't append a colon if there already is a colon\", async () => {\n    expect(tokenItemToString(messageWithPunctuation('test:'))).toBe('test:')\n  })\n})\n"]}