{"version":3,"file":"collection.test.js","sourceRoot":"","sources":["../../../src/public/common/collection.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,OAAO,EAAE,SAAS,EAAC,MAAM,iBAAiB,CAAA;AAClD,OAAO,EAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAC,MAAM,QAAQ,CAAA;AAE7C,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IACvB,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC5C,MAAM,CACJ,OAAO,CACL;YACE,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAC;YAC/B,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAC;YAC/B,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,EAAC;SACnC,EACD,MAAM,CACP,CACF,CAAC,OAAO,CAAC;YACR,MAAM,EAAE;gBACN,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAC;gBAC/B,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAC;aAChC;YACD,SAAS,EAAE,CAAC,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,EAAC,CAAC;SAChD,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,IAAI,CAAC,yDAAyD,EAAE,GAAG,EAAE;QACnE,QAAQ;QACR,MAAM,KAAK,GAAG;YACZ,EAAC,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,EAAC;YACxC,EAAC,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAC;YACrC,EAAC,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAC;SACzC,CAAA;QAED,OAAO;QACP,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAEnD,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;YAClB,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC;YACvC;gBACE,EAAC,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,EAAC;gBACxC,EAAC,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAC;aACzC;SACF,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {groupBy, partition} from './collection.js'\nimport {describe, test, expect} from 'vitest'\n\ndescribe('groupBy', () => {\n  test('groups the elements in the array', () => {\n    expect(\n      groupBy(\n        [\n          {city: 'Berlin', name: 'User1'},\n          {city: 'Berlin', name: 'User2'},\n          {city: 'Barcelona', name: 'User3'},\n        ],\n        'city',\n      ),\n    ).toEqual({\n      Berlin: [\n        {city: 'Berlin', name: 'User1'},\n        {city: 'Berlin', name: 'User2'},\n      ],\n      Barcelona: [{city: 'Barcelona', name: 'User3'}],\n    })\n  })\n})\n\ndescribe('partition', () => {\n  test('creates a partition with the elements in the collection', () => {\n    // Given\n    const users = [\n      {user: 'barney', age: 36, active: false},\n      {user: 'fred', age: 40, active: true},\n      {user: 'pebbles', age: 1, active: false},\n    ]\n\n    // When\n    const got = partition(users, (item) => item.active)\n\n    // Then\n    expect(got).toEqual([\n      [{user: 'fred', age: 40, active: true}],\n      [\n        {user: 'barney', age: 36, active: false},\n        {user: 'pebbles', age: 1, active: false},\n      ],\n    ])\n  })\n})\n"]}