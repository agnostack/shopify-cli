{"version":3,"file":"object.test.js","sourceRoot":"","sources":["../../../src/public/common/object.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {deepMergeObjects, mapValues, pickBy} from './object.js'\nimport {describe, expect, test} from 'vitest'\n\ndescribe('deepMergeObjects', () => {\n  test('deep merges objects', () => {\n    // Given\n    const lhs = {name: 'test', list: ['a'], object: {test: 'test'}}\n    const rhs = {city: 'berlin', list: ['b'], object: {test2: 'test2'}}\n\n    // When\n    const got = deepMergeObjects(lhs, rhs)\n\n    // Then\n    expect(got.name).toEqual('test')\n    expect(got.city).toEqual('berlin')\n    expect(got.list).toEqual(['a', 'b'])\n    expect(got.object.test).toEqual('test')\n    expect(got.object.test2).toEqual('test2')\n  })\n\n  test('deep merges objects with arrays containing matching values', () => {\n    // Given\n    const lhs = {name: 'test', list: ['a'], object: {test: 'test'}}\n    const rhs = {city: 'berlin', list: ['b', 'a'], object: {test2: 'test2'}}\n\n    // When\n    const got = deepMergeObjects(lhs, rhs)\n\n    // Then\n    expect(got.name).toEqual('test')\n    expect(got.city).toEqual('berlin')\n    expect(got.list).toEqual(['a', 'b'])\n    expect(got.object.test).toEqual('test')\n    expect(got.object.test2).toEqual('test2')\n  })\n})\n\ndescribe('pickBy', () => {\n  test('', () => {\n    // Given\n    const items = {foo: 'test', bar: 'testtesttest'}\n\n    // When\n    const got = pickBy(items, (item) => item.length > 4)\n\n    // Then\n    expect(got).toEqual({bar: 'testtesttest'})\n  })\n})\n\ndescribe('mapValues', () => {\n  test('maps the values of the object', () => {\n    // Given\n    const users = {\n      fred: {user: 'fred', age: 40},\n      pebbles: {user: 'pebbles', age: 1},\n    }\n    // When\n    const got = mapValues(users, (item) => {\n      return item.age\n    })\n\n    // Then\n    expect(got).toEqual({fred: 40, pebbles: 1})\n  })\n})\n"]}