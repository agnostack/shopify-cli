{"version":3,"file":"string.test.js","sourceRoot":"","sources":["../../../src/public/common/string.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {getRandomName, linesToColumns, pluralize, tryParseInt} from './string.js'\nimport {describe, expect, test} from 'vitest'\n\ndescribe('getRandomName', () => {\n  test('generates a non-empty string', () => {\n    // Given/When\n    const got = getRandomName()\n\n    // Then\n    expect(got.length).not.toBe(0)\n  })\n})\n\ndescribe('tryParseInt', () => {\n  test('converts a string to an int', () => {\n    expect(tryParseInt('  999 ')).toEqual(999)\n  })\n  test('ignores unspecified strings', () => {\n    expect(tryParseInt(undefined)).toEqual(undefined)\n  })\n  test('ignores bad strings', () => {\n    expect(tryParseInt('not this')).toEqual(undefined)\n  })\n})\n\ndescribe('linesToColumns', () => {\n  test('converts a set of lines to columns', () => {\n    // Given\n    const lines = [\n      ['one', 'two', 'three'],\n      ['four', 'five', 'six'],\n    ]\n\n    // When\n    const got = linesToColumns(lines)\n\n    // Then\n    expect(got).toEqual(\n      `\none    two    three\nfour   five   six\n`.trim(),\n    )\n  })\n})\n\ndescribe('pluralize', () => {\n  const pluralized = (items: string[]) => {\n    return pluralize(\n      items,\n      (items) => `This list has many items: ${items.join(', ')}`,\n      (item) => `This list has a single item (${item})`,\n      () => 'This list has no items',\n    )\n  }\n\n  test('formats the list when it has many items', () => {\n    // Given\n    const lines = ['one', 'two', 'three']\n\n    // When\n    const str = pluralized(lines)\n\n    // Then\n    expect(str).toBe('This list has many items: one, two, three')\n  })\n\n  test('formats the list when it has only one item', () => {\n    // Given\n    const lines = ['one']\n\n    // When\n    const str = pluralized(lines)\n\n    // Then\n    expect(str).toBe('This list has a single item (one)')\n  })\n\n  test('formats the list when it has no items', () => {\n    // Given/When\n    const str = pluralized([])\n\n    // Then\n    expect(str).toBe('This list has no items')\n  })\n})\n"]}