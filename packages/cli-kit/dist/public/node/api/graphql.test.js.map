{"version":3,"file":"graphql.test.js","sourceRoot":"","sources":["../../../../src/public/node/api/graphql.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,cAAc,EAAC,MAAM,cAAc,CAAA;AAC3C,OAAO,EAAC,oBAAoB,EAAC,MAAM,8BAA8B,CAAA;AACjE,OAAO,KAAK,YAAY,MAAM,sCAAsC,CAAA;AACpE,OAAO,EAAC,YAAY,EAAC,MAAM,sCAAsC,CAAA;AACjE,OAAO,EAAC,aAAa,EAAC,MAAM,iBAAiB,CAAA;AAC7C,OAAO,EAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAC,MAAM,QAAQ,CAAA;AAG7D,EAAE,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAA;AACvC,EAAE,CAAC,IAAI,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;IACpC,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAA;IACvD,MAAM,MAAM,GAAG,EAAE,CAAC,EAAE,EAAE,CAAA;IACtB,MAAM,CAAC,SAAS,CAAC,UAAU,GAAG,EAAE,CAAC,EAAE,EAAE,CAAA;IAErC,OAAO;QACL,GAAI,MAAiB;QACrB,aAAa,EAAE,MAAM;KACtB,CAAA;AACH,CAAC,CAAC,CAAA;AACF,EAAE,CAAC,KAAK,CAAC,YAAY,EAAE,qBAAqB,CAAC,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAA;AAE1E,MAAM,aAAa,GAAG,eAAe,CAAA;AACrC,MAAM,aAAa,GAAG,EAAC,IAAI,EAAE,WAAW,EAAC,CAAA;AACzC,MAAM,SAAS,GAAG,OAAO,CAAA;AACzB,MAAM,kBAAkB,GAAG,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAA;AAE3C,UAAU,CAAC,KAAK,IAAI,EAAE;IACpB,EAAE,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,iBAAiB,CAAC;QAChD,MAAM,EAAE,GAAG;QACX,OAAO,EAAE,EAAa;KACvB,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,cAAc,CAAC;YACnB,KAAK,EAAE,OAAO;YACd,GAAG,EAAE,SAAS;YACd,GAAG,EAAE,aAAa;YAClB,KAAK,EAAE,SAAS;YAChB,YAAY,EAAE,kBAAkB;YAChC,SAAS,EAAE,aAAa;SACzB,CAAC,CAAA;QACF,MAAM,CAAC,aAAa,CAAC,CAAC,oBAAoB,CAAC,aAAa,EAAE;YACxD,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;YACzB,OAAO,EAAE;gBACP,GAAG,YAAY,CAAC,SAAS,CAAC;gBAC1B,IAAI,EAAE,QAAQ;aACf;SACF,CAAC,CAAA;QACF,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAA;QACvF,MAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,oBAAoB,EAAE,CAAA;QAC/D,MAAM,cAAc,GAAG;YACrB,OAAO,EAAE,SAAS;YAClB,GAAG,EAAE,aAAa;SACnB,CAAA;QACD,MAAM,CAAC,oBAAoB,CAAC,CAAC,oBAAoB,CAAC,cAAc,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAA;IACzF,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {graphqlRequest} from './graphql.js'\nimport {debugLogResponseInfo} from '../../../private/node/api.js'\nimport * as debugRequest from '../../../private/node/api/graphql.js'\nimport {buildHeaders} from '../../../private/node/api/headers.js'\nimport {GraphQLClient} from 'graphql-request'\nimport {test, vi, describe, expect, beforeEach} from 'vitest'\nimport {Headers} from 'node-fetch'\n\nvi.mock('../../../private/node/api.js')\nvi.mock('graphql-request', async () => {\n  const actual = await vi.importActual('graphql-request')\n  const client = vi.fn()\n  client.prototype.rawRequest = vi.fn()\n\n  return {\n    ...(actual as object),\n    GraphQLClient: client,\n  }\n})\nvi.spyOn(debugRequest, 'debugLogRequestInfo').mockResolvedValue(undefined)\n\nconst mockedAddress = 'mockedAddress'\nconst mockVariables = {some: 'variables'}\nconst mockToken = 'token'\nconst mockedAddedHeaders = {some: 'header'}\n\nbeforeEach(async () => {\n  vi.mocked(debugLogResponseInfo).mockResolvedValue({\n    status: 200,\n    headers: {} as Headers,\n  })\n})\n\ndescribe('graphqlRequest', () => {\n  test('calls debugLogRequestInfo once', async () => {\n    await graphqlRequest({\n      query: 'query',\n      api: 'mockApi',\n      url: mockedAddress,\n      token: mockToken,\n      addedHeaders: mockedAddedHeaders,\n      variables: mockVariables,\n    })\n    expect(GraphQLClient).toHaveBeenCalledWith(mockedAddress, {\n      agent: expect.any(Object),\n      headers: {\n        ...buildHeaders(mockToken),\n        some: 'header',\n      },\n    })\n    expect(GraphQLClient.prototype.rawRequest).toHaveBeenCalledWith('query', mockVariables)\n    expect(debugRequest.debugLogRequestInfo).toHaveBeenCalledOnce()\n    const receivedObject = {\n      request: undefined,\n      url: mockedAddress,\n    }\n    expect(debugLogResponseInfo).toHaveBeenCalledWith(receivedObject, expect.any(Function))\n  })\n})\n"]}