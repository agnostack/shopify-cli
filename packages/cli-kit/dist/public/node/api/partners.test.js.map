{"version":3,"file":"partners.test.js","sourceRoot":"","sources":["../../../../src/public/node/api/partners.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {partnersRequest, functionProxyRequest, handleDeprecations} from './partners.js'\nimport {graphqlRequest, GraphQLResponse} from './graphql.js'\nimport {partnersFqdn} from '../context/fqdn.js'\nimport {setNextDeprecationDate} from '../../../private/node/context/deprecations-store.js'\nimport {test, vi, expect, describe, beforeEach, beforeAll} from 'vitest'\n\nvi.mock('./graphql.js')\nvi.mock('../../../private/node/context/deprecations-store.js')\nvi.mock('../context/fqdn.js')\n\nconst mockedResult = 'OK'\nconst partnersFQDN = 'partners.shopify.com'\nconst url = 'https://partners.shopify.com/api/cli/graphql'\n\nconst mockedToken = 'token'\n\nbeforeEach(() => {\n  vi.mocked(partnersFqdn).mockResolvedValue(partnersFQDN)\n})\n\ndescribe('partnersRequest', () => {\n  test('graphqlRequest is called with correct parameters', async () => {\n    // Given\n    vi.mocked(graphqlRequest).mockResolvedValue(mockedResult)\n\n    // When\n    await partnersRequest('query', mockedToken, {variables: 'variables'})\n\n    // Then\n    expect(graphqlRequest).toHaveBeenLastCalledWith({\n      query: 'query',\n      api: 'Partners',\n      url,\n      token: mockedToken,\n      variables: {variables: 'variables'},\n      responseOptions: {onResponse: handleDeprecations},\n    })\n  })\n})\n\ndescribe('functionProxyRequest', () => {\n  test('graphqlRequest is called with correct parameters', async () => {\n    // Given\n    const extensions = {deprecations: [{supportedUntilDate: new Date().toISOString()}]}\n    const scriptServiceResponse = {data: {}, extensions}\n    const proxyResponse = {scriptServiceProxy: JSON.stringify(scriptServiceResponse)}\n    vi.mocked(graphqlRequest).mockResolvedValue(proxyResponse)\n\n    // When\n    const apiKey = 'api-key'\n    const query = 'query'\n    const variables = {variables: 'variables'}\n    await functionProxyRequest(apiKey, query, mockedToken, variables)\n\n    // Then\n    expect(graphqlRequest).toHaveBeenLastCalledWith({\n      query: expect.stringContaining('scriptServiceProxy'),\n      api: 'Partners',\n      url,\n      token: mockedToken,\n      variables: {\n        api_key: apiKey,\n        query,\n        variables: JSON.stringify(variables) || '{}',\n      },\n      responseOptions: {onResponse: handleDeprecations},\n    })\n  })\n})\n\ndescribe('handleDeprecations', () => {\n  beforeAll(() => {\n    vi.mocked(setNextDeprecationDate)\n  })\n\n  test('does not call setNextDeprecationDate if response contains no deprecations', () => {\n    // Given\n    const response = {data: {}} as GraphQLResponse<object>\n\n    // When\n    handleDeprecations(response)\n\n    // Then\n    expect(setNextDeprecationDate).not.toBeCalled()\n  })\n\n  test('calls setNextDeprecationDate with response extensions deprecation dates', () => {\n    // Given\n    const deprecationDates = [new Date()]\n    const deprecations = deprecationDates.map((supportedUntilDate) => ({supportedUntilDate}))\n    const response = {data: {}, extensions: {deprecations}} as GraphQLResponse<object>\n\n    // When\n    handleDeprecations(response)\n\n    // Then\n    expect(setNextDeprecationDate).toHaveBeenLastCalledWith(deprecationDates)\n  })\n})\n"]}