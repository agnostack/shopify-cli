{"version":3,"file":"archiver.integration.test.js","sourceRoot":"","sources":["../../../src/public/node/archiver.integration.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {zip} from './archiver.js'\nimport {fileExists, inTemporaryDirectory, mkdir, touchFile} from './fs.js'\nimport {joinPath, dirname} from './path.js'\nimport {describe, expect, test} from 'vitest'\nimport StreamZip from 'node-stream-zip'\n\ndescribe('zip', () => {\n  test('zips a directory', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const zipPath = joinPath(tmpDir, 'output.zip')\n      const outputDirectoryName = 'output'\n      const outputDirectoryPath = joinPath(tmpDir, outputDirectoryName)\n      const structure = ['extensions/first/main.js', 'test.json']\n\n      await createFiles(structure, outputDirectoryPath)\n\n      // When\n      await zip({\n        inputDirectory: outputDirectoryPath,\n        outputZipPath: zipPath,\n      })\n\n      // Then\n      const archiveEntries = await readArchiveFiles(zipPath)\n      expect(structure.sort()).toEqual(archiveEntries.sort())\n    })\n  })\n\n  test('only zips files that match input pattern', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const zipPath = joinPath(tmpDir, 'output.zip')\n      const outputDirectoryName = 'output'\n      const outputDirectoryPath = joinPath(tmpDir, outputDirectoryName)\n      const structure = ['extensions/first/main.js', 'test.json']\n\n      await createFiles(structure, outputDirectoryPath)\n\n      // When\n      await zip({\n        inputDirectory: outputDirectoryPath,\n        outputZipPath: zipPath,\n        matchFilePattern: '**/extensions/**',\n      })\n\n      // Then\n      const archiveEntries = await readArchiveFiles(zipPath)\n      expect([`extensions/first/main.js`]).toEqual(archiveEntries)\n    })\n  })\n})\n\nasync function createFiles(structure: string[], directory: string) {\n  for (const fileRelativePath of structure) {\n    const filePath = joinPath(directory, fileRelativePath)\n    // eslint-disable-next-line no-await-in-loop\n    await mkdir(dirname(filePath))\n    // eslint-disable-next-line no-await-in-loop\n    await touchFile(filePath)\n  }\n}\n\nasync function readArchiveFiles(zipPath: string) {\n  await expect(fileExists(zipPath)).resolves.toBeTruthy()\n  // eslint-disable-next-line @babel/new-cap\n  const archive = new StreamZip.async({file: zipPath})\n  const archiveEntries = Object.keys(await archive.entries())\n  await archive.close()\n\n  return archiveEntries\n}\n"]}