{"version":3,"file":"base-command.test.js","sourceRoot":"","sources":["../../../src/public/node/base-command.test.ts"],"names":[],"mappings":"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","sourcesContent":["import Command from './base-command.js'\nimport {Environments} from './environments.js'\nimport {encodeToml as encodeTOML} from './toml.js'\nimport {globalFlags} from './cli.js'\nimport {inTemporaryDirectory, mkdir, writeFile} from './fs.js'\nimport {joinPath, resolvePath, cwd} from './path.js'\nimport {mockAndCaptureOutput} from './testing/output.js'\nimport {describe, expect, test} from 'vitest'\nimport {Flags} from '@oclif/core'\n\nlet testResult: {[flag: string]: unknown} = {}\nlet testError: Error | undefined\n\nclass MockCommand extends Command {\n  /* eslint-disable @shopify/cli/command-flags-with-env */\n  static flags = {\n    ...globalFlags,\n    path: Flags.string({\n      parse: async (input) => resolvePath(input),\n      default: async () => cwd(),\n    }),\n    someString: Flags.string({}),\n    someInteger: Flags.integer({}),\n    someBoolean: Flags.boolean({}),\n    someExclusiveString: Flags.string({\n      exclusive: ['someBoolean'],\n    }),\n    someMultipleString: Flags.string({multiple: true}),\n    someStringWithDefault: Flags.string({\n      default: 'default stringy',\n    }),\n    password: Flags.string({}),\n    environment: Flags.string({}),\n  }\n  /* eslint-enable @shopify/cli/command-flags-with-env */\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(MockCommand)\n    testResult = flags\n  }\n\n  async catch(error: Error): Promise<void> {\n    testError = error\n  }\n\n  environmentsFilename(): string {\n    return 'shopify.environments.toml'\n  }\n}\n\nconst validEnvironment = {\n  someString: 'stringy',\n  someBoolean: true,\n}\n\nconst validEnvironmentWithIrrelevantFlag = {\n  ...validEnvironment,\n  irrelevantString: 'stringy',\n}\n\nconst environmentWithIncorrectType = {\n  someInteger: 'stringy',\n}\n\nconst environmentWithExclusiveArguments = {\n  someBoolean: true,\n  someExclusiveString: 'exclusive stringy',\n}\n\nconst environmentWithNegativeBoolean = {\n  someBoolean: false,\n}\n\nconst environmentWithMultiples = {\n  someMultipleString: ['multiple', 'stringies'],\n}\n\nconst environmentMatchingDefault = {\n  someStringWithDefault: 'default stringy',\n}\n\nconst environmentWithDefaultOverride = {\n  someStringWithDefault: 'non-default stringy',\n}\n\nconst environmentWithPassword = {\n  password: 'password',\n}\n\nconst allEnvironments: Environments = {\n  environments: {\n    validEnvironment,\n    validEnvironmentWithIrrelevantFlag,\n    environmentWithIncorrectType,\n    environmentWithExclusiveArguments,\n    environmentWithNegativeBoolean,\n    environmentWithMultiples,\n    environmentMatchingDefault,\n    environmentWithDefaultOverride,\n    environmentWithPassword,\n  },\n}\n\ndescribe('applying environments', async () => {\n  const runTestInTmpDir = (testName: string, testFunc: (tmpDir: string) => Promise<void>) => {\n    test(testName, async () => {\n      testResult = {}\n      testError = undefined\n\n      await inTemporaryDirectory(async (tmpDir) => {\n        await writeFile(joinPath(tmpDir, 'shopify.environments.toml'), encodeTOML(allEnvironments as any))\n        await testFunc(tmpDir)\n      })\n    })\n  }\n\n  function expectFlags(path: string, environment: keyof typeof allEnvironments) {\n    const envFlags = allEnvironments.environments && (allEnvironments.environments[environment] as Environments)\n    expect(testResult).toEqual({\n      path: resolvePath(path),\n      someStringWithDefault: 'default stringy',\n      environment,\n      ...envFlags,\n    })\n  }\n\n  runTestInTmpDir('does not apply a environment when none is specified', async (tmpDir: string) => {\n    // Given\n    const outputMock = mockAndCaptureOutput()\n    outputMock.clear()\n\n    // When\n    await MockCommand.run(['--path', tmpDir])\n\n    // Then\n    expect(testResult).toEqual({\n      path: resolvePath(tmpDir),\n      someStringWithDefault: 'default stringy',\n    })\n    expect(outputMock.info()).toEqual('')\n  })\n\n  runTestInTmpDir('applies a environment when one is specified', async (tmpDir: string) => {\n    // Given\n    const outputMock = mockAndCaptureOutput()\n    outputMock.clear()\n\n    // When\n    await MockCommand.run(['--path', tmpDir, '--environment', 'validEnvironment'])\n\n    // Then\n    expectFlags(tmpDir, 'validEnvironment')\n    expect(outputMock.info()).toMatchInlineSnapshot(`\n      \"╭─ info ───────────────────────────────────────────────────────────────────────╮\n      │                                                                              │\n      │  Using applicable flags from validEnvironment environment:                   │\n      │                                                                              │\n      │    • someString: stringy                                                     │\n      │    • someBoolean: true                                                       │\n      │                                                                              │\n      ╰──────────────────────────────────────────────────────────────────────────────╯\n      \"\n    `)\n  })\n\n  runTestInTmpDir('searches up recursively from path by default', async (tmpDir: string) => {\n    // Given\n    const subdir = joinPath(tmpDir, 'somedir', '--environment', 'validEnvironment')\n    await mkdir(subdir)\n\n    // When\n    await MockCommand.run(['--path', subdir, '--environment', 'validEnvironment'])\n\n    // Then\n    expectFlags(subdir, 'validEnvironment')\n  })\n\n  runTestInTmpDir('prefers command line arguments to environment settings', async (tmpDir: string) => {\n    // Given\n    const outputMock = mockAndCaptureOutput()\n    outputMock.clear()\n\n    // When\n    await MockCommand.run(['--path', tmpDir, '--environment', 'validEnvironment', '--someString', 'cheesy'])\n\n    // Then\n    expect(testResult.someString).toEqual('cheesy')\n    expect(outputMock.info()).toMatchInlineSnapshot(`\n      \"╭─ info ───────────────────────────────────────────────────────────────────────╮\n      │                                                                              │\n      │  Using applicable flags from validEnvironment environment:                   │\n      │                                                                              │\n      │    • someBoolean: true                                                       │\n      │                                                                              │\n      ╰──────────────────────────────────────────────────────────────────────────────╯\n      \"\n    `)\n  })\n\n  runTestInTmpDir('ignores the specified environment when it does not exist', async (tmpDir: string) => {\n    // When\n    await MockCommand.run(['--path', tmpDir, '--environment', 'nonexistentEnvironment'])\n\n    // Then\n    expect(testResult).toEqual({\n      path: resolvePath(tmpDir),\n      environment: 'nonexistentEnvironment',\n      someStringWithDefault: 'default stringy',\n    })\n  })\n\n  runTestInTmpDir('does not apply flags irrelevant to the current command', async (tmpDir: string) => {\n    // When\n    await MockCommand.run(['--path', tmpDir, '--environment', 'validEnvironmentWithIrrelevantFlag'])\n\n    // Then\n    expect(testResult).toEqual({\n      path: resolvePath(tmpDir),\n      environment: 'validEnvironmentWithIrrelevantFlag',\n      ...validEnvironment,\n      someStringWithDefault: 'default stringy',\n    })\n  })\n\n  runTestInTmpDir('throws when an argument of the incorrect type is provided', async (tmpDir: string) => {\n    // When\n    await MockCommand.run(['--path', tmpDir, '--environment', 'environmentWithIncorrectType'])\n\n    // Then\n    expect(testError?.message).toMatch('Expected an integer but received: stringy')\n  })\n\n  runTestInTmpDir('throws when exclusive arguments are provided', async (tmpDir: string) => {\n    // When\n    await MockCommand.run(['--path', tmpDir, '--environment', 'environmentWithExclusiveArguments'])\n\n    // Then\n    expect(testError?.message).toMatch('--someBoolean=true cannot also be provided when using --someExclusiveString')\n  })\n\n  runTestInTmpDir('throws on negated booleans', async (tmpDir: string) => {\n    // When\n    await MockCommand.run(['--path', tmpDir, '--environment', 'environmentWithNegativeBoolean'])\n\n    // Then\n    expect(testError?.message).toMatch(\n      /Environments can only specify true for boolean flags\\. Attempted to set .+someBoolean.+ to false\\./,\n    )\n  })\n\n  runTestInTmpDir('handles multiples correctly', async (tmpDir: string) => {\n    // When\n    await MockCommand.run(['--path', tmpDir, '--environment', 'environmentWithMultiples'])\n\n    // Then\n    expectFlags(tmpDir, 'environmentWithMultiples')\n  })\n\n  runTestInTmpDir(\n    'throws when exclusive arguments are provided when combining command line + environment',\n    async (tmpDir: string) => {\n      // When\n      await MockCommand.run(['--path', tmpDir, '--environment', 'validEnvironment', '--someExclusiveString', 'stringy'])\n\n      // Then\n      expect(testError?.message).toMatch('--someBoolean=true cannot also be provided when using --someExclusiveString')\n    },\n  )\n\n  runTestInTmpDir('reports environment settings that do not match defaults', async (tmpDir: string) => {\n    // Given\n    const outputMock = mockAndCaptureOutput()\n    outputMock.clear()\n\n    // When\n    await MockCommand.run(['--path', tmpDir, '--environment', 'environmentWithDefaultOverride'])\n\n    // Then\n    expectFlags(tmpDir, 'environmentWithDefaultOverride')\n    expect(outputMock.info()).toMatchInlineSnapshot(`\n      \"╭─ info ───────────────────────────────────────────────────────────────────────╮\n      │                                                                              │\n      │  Using applicable flags from environmentWithDefaultOverride environment:     │\n      │                                                                              │\n      │    • someStringWithDefault: non-default stringy                              │\n      │                                                                              │\n      ╰──────────────────────────────────────────────────────────────────────────────╯\n      \"\n    `)\n  })\n\n  runTestInTmpDir('reports environment settings that match defaults', async (tmpDir: string) => {\n    // Given\n    const outputMock = mockAndCaptureOutput()\n    outputMock.clear()\n\n    // When\n    await MockCommand.run(['--path', tmpDir, '--environment', 'environmentMatchingDefault'])\n\n    // Then\n    expectFlags(tmpDir, 'environmentMatchingDefault')\n    expect(outputMock.info()).toMatchInlineSnapshot(`\n      \"╭─ info ───────────────────────────────────────────────────────────────────────╮\n      │                                                                              │\n      │  Using applicable flags from environmentMatchingDefault environment:         │\n      │                                                                              │\n      │    • someStringWithDefault: default stringy                                  │\n      │                                                                              │\n      ╰──────────────────────────────────────────────────────────────────────────────╯\n      \"\n    `)\n  })\n\n  runTestInTmpDir('reports environment settings with masked passwords', async (tmpDir: string) => {\n    // Given\n    const outputMock = mockAndCaptureOutput()\n    outputMock.clear()\n\n    // When\n    await MockCommand.run(['--path', tmpDir, '--environment', 'environmentWithPassword'])\n\n    // Then\n    expectFlags(tmpDir, 'environmentWithPassword')\n    expect(outputMock.info()).toMatchInlineSnapshot(`\n      \"╭─ info ───────────────────────────────────────────────────────────────────────╮\n      │                                                                              │\n      │  Using applicable flags from environmentWithPassword environment:            │\n      │                                                                              │\n      │    • password: ********word                                                  │\n      │                                                                              │\n      ╰──────────────────────────────────────────────────────────────────────────────╯\n      \"\n    `)\n  })\n})\n"]}