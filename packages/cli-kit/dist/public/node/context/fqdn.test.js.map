{"version":3,"file":"fqdn.test.js","sourceRoot":"","sources":["../../../../src/public/node/context/fqdn.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {partnersFqdn, identityFqdn, normalizeStoreFqdn} from './fqdn.js'\nimport {spinFqdn, isSpinEnvironment} from '../context/spin.js'\nimport {Environment, serviceEnvironment} from '../../../private/node/context/service.js'\nimport {expect, describe, test, vi} from 'vitest'\n\nvi.mock('../context/spin.js')\nvi.mock('../../../private/node/context/service.js')\n\ndescribe('partners', () => {\n  test('returns the local fqdn when the environment is local', async () => {\n    // Given\n    vi.mocked(serviceEnvironment).mockReturnValue(Environment.Local)\n\n    // When\n    const got = await partnersFqdn()\n\n    // Then\n    expect(got).toEqual('partners.myshopify.io')\n  })\n\n  test('returns the production fqdn when the environment is production', async () => {\n    // Given\n    vi.mocked(serviceEnvironment).mockReturnValue(Environment.Production)\n\n    // When\n    const got = await partnersFqdn()\n\n    // Then\n    expect(got).toEqual('partners.shopify.com')\n  })\n\n  test(\"returns the spin fqdn if the environment is spin and it's running in a Spin environment\", async () => {\n    // Given\n    vi.mocked(serviceEnvironment).mockReturnValue(Environment.Spin)\n    vi.mocked(spinFqdn).mockResolvedValue('spin.com')\n\n    // When\n    const got = await partnersFqdn()\n\n    // Then\n    expect(got).toEqual('partners.spin.com')\n  })\n})\n\ndescribe('identity', () => {\n  test('returns the local fqdn when the environment is local', async () => {\n    // Given\n    vi.mocked(serviceEnvironment).mockReturnValue(Environment.Local)\n\n    // When\n    const got = await identityFqdn()\n\n    // Then\n    expect(got).toEqual('identity.myshopify.io')\n  })\n\n  test('returns the production fqdn when the environment is production', async () => {\n    // Given\n    vi.mocked(serviceEnvironment).mockReturnValue(Environment.Production)\n\n    // When\n    const got = await identityFqdn()\n\n    // Then\n    expect(got).toEqual('accounts.shopify.com')\n  })\n\n  test(\"returns the spin fqdn if the environment is spin and it's running in a Spin environment\", async () => {\n    // Given\n    vi.mocked(serviceEnvironment).mockReturnValue(Environment.Spin)\n    vi.mocked(spinFqdn).mockResolvedValue('spin.com')\n\n    // When\n    const got = await identityFqdn()\n\n    // Then\n    expect(got).toEqual('identity.spin.com')\n  })\n})\n\ndescribe('normalizeStore', () => {\n  test('parses store name with http', async () => {\n    // When\n    const got = await normalizeStoreFqdn('http://example.myshopify.com')\n\n    // Then\n    expect(got).toEqual('example.myshopify.com')\n  })\n\n  test('parses store name with https', async () => {\n    // When\n    const got = await normalizeStoreFqdn('https://example.myshopify.com')\n\n    // Then\n    expect(got).toEqual('example.myshopify.com')\n  })\n\n  test('parses store name with https when spin URL', async () => {\n    // When\n    const got = await normalizeStoreFqdn('https://devstore001.shopify.partners-6xat.test.us.spin.dev')\n\n    // Then\n    expect(got).toEqual('devstore001.shopify.partners-6xat.test.us.spin.dev')\n  })\n\n  test('parses store name without domain', async () => {\n    // When\n    const got = await normalizeStoreFqdn('example')\n\n    // Then\n    expect(got).toEqual('example.myshopify.com')\n  })\n\n  test('parses store name without domain in spin', async () => {\n    // Given\n    vi.mocked(isSpinEnvironment).mockReturnValue(true)\n    vi.mocked(spinFqdn).mockResolvedValue('mydomain.spin.dev')\n\n    // When\n    const got = await normalizeStoreFqdn('example')\n\n    // Then\n    expect(got).toEqual('example.shopify.mydomain.spin.dev')\n  })\n})\n"]}