{"version":3,"file":"spin.test.js","sourceRoot":"","sources":["../../../../src/public/node/context/spin.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {show, isSpin, spinFqdn, instance, isSpinEnvironment, appPort, appHost} from './spin.js'\nimport {getCachedSpinFqdn, setCachedSpinFqdn} from '../../../private/node/context/spin-cache.js'\nimport {captureOutput} from '../system.js'\nimport {describe, expect, vi, test} from 'vitest'\n\nvi.mock('../system.js')\nvi.mock('../../../private/node/context/spin-cache.js')\n\nconst mockedCaptureOutput = vi.mocked(captureOutput)\n\ndescribe('fqdn', () => {\n  test('shows the latest when SPIN_INSTANCE is not present and there is no cached value', async () => {\n    // Given\n    const env = {}\n    const showResponse = {fqdn: 'fqdn'}\n    vi.mocked(getCachedSpinFqdn).mockReturnValue(undefined)\n    mockedCaptureOutput.mockResolvedValue(JSON.stringify(showResponse))\n\n    // When\n    const got = await spinFqdn(env)\n\n    // Then\n    expect(got).toEqual('fqdn')\n    expect(mockedCaptureOutput).toHaveBeenCalledWith('spin', ['show', '--latest', '--json'], {env})\n    expect(setCachedSpinFqdn).toBeCalledWith('fqdn')\n  })\n\n  test(\"doesn't show the latest when SPIN_INSTANCE is present and there is no cached value\", async () => {\n    // Given\n    const env = {SPIN_INSTANCE: 'instance'}\n    const showResponse = {fqdn: 'fqdn'}\n    vi.mocked(getCachedSpinFqdn).mockReturnValue(undefined)\n    mockedCaptureOutput.mockResolvedValue(JSON.stringify(showResponse))\n\n    // When\n    const got = await spinFqdn(env)\n\n    // Then\n    expect(got).toEqual('fqdn')\n    expect(mockedCaptureOutput).toHaveBeenCalledWith('spin', ['show', '--json'], {env})\n    expect(setCachedSpinFqdn).toBeCalledWith('fqdn')\n  })\n\n  test('return cached spin fqdn if valid', async () => {\n    // Given\n    const env = {}\n    vi.mocked(getCachedSpinFqdn).mockReturnValue('cachedFQDN')\n\n    // When\n    const got = await spinFqdn(env)\n\n    // Then\n    expect(got).toEqual('cachedFQDN')\n    expect(mockedCaptureOutput).not.toHaveBeenCalledWith('spin', ['show', '--json'], {env})\n    expect(setCachedSpinFqdn).not.toBeCalled()\n  })\n})\n\ndescribe('show', () => {\n  test(\"calls 'spin show' with --latest when latest is true\", async () => {\n    // Given\n    const showResponse = {fqdn: 'fqdn'}\n    mockedCaptureOutput.mockResolvedValue(JSON.stringify(showResponse))\n    const env = {}\n\n    // When\n    const got = await show(undefined, env)\n\n    // Then\n    expect(got).toEqual(showResponse)\n    expect(mockedCaptureOutput).toHaveBeenCalledWith('spin', ['show', '--latest', '--json'], {env})\n  })\n\n  test(\"calls 'spin show' without --latest when latest is false\", async () => {\n    // Given\n    const showResponse = {fqdn: 'fqdn'}\n    mockedCaptureOutput.mockResolvedValue(JSON.stringify(showResponse))\n    const env = {}\n\n    // When\n    const got = await show('instance', env)\n\n    // Then\n    expect(got).toEqual(showResponse)\n    expect(mockedCaptureOutput).toHaveBeenCalledWith('spin', ['show', '--json'], {env})\n  })\n\n  test(\"throws an error when 'show --json' returns a JSON response with an error key\", async () => {\n    // Given\n    const errorMessage = 'Something went wrong'\n    const showResponse = {error: errorMessage}\n    mockedCaptureOutput.mockResolvedValue(JSON.stringify(showResponse))\n    const env = {}\n\n    // When\n    await expect(() => show('instance', env)).rejects.toThrowError(/yielded the following error.*Something went wrong/s)\n  })\n})\n\ndescribe('isSpin', () => {\n  test('returns true if SPIN=1', () => {\n    // Given\n    const env = {SPIN: '1'}\n\n    // When\n    const got = isSpin(env)\n\n    // Then\n    expect(got).toBeTruthy()\n  })\n})\n\ndescribe('instance', () => {\n  test('returns the value of SPIN_INSTANCE', () => {\n    // Given\n    const instanceName = 'instance'\n    const env = {SPIN_INSTANCE: instanceName}\n\n    // When\n    const got = instance(env)\n\n    // Then\n    expect(got).toBe(instanceName)\n  })\n\n  test('returns undefined value when SPIN_INSTANCE is not defined', () => {\n    // Given\n    const env = {}\n\n    // When\n    const got = instance(env)\n\n    // Then\n    expect(got).toBeUndefined()\n  })\n})\n\ndescribe('isSpinEnvironment', () => {\n  test('returns true when running against SPIN instance', () => {\n    // Given\n    const env = {SHOPIFY_SERVICE_ENV: 'spin'}\n\n    // When\n    const got = isSpinEnvironment(env)\n\n    // Then\n    expect(got).toBe(true)\n  })\n\n  test('returns true when running inside a SPIN instance', () => {\n    // Given\n    const env = {SPIN: '1'}\n\n    // When\n    const got = isSpinEnvironment(env)\n\n    // Then\n    expect(got).toBe(true)\n  })\n\n  test('returns false when not working with spin instances', () => {\n    // Given\n    const env = {SHOPIFY_SERVICE_ENV: 'local'}\n\n    // When\n    const got = isSpinEnvironment(env)\n\n    // Then\n    expect(got).toBe(false)\n  })\n})\n\ndescribe('appPort', () => {\n  test('returns the value of SERVER_PORT', () => {\n    // Given\n    const port = '1234'\n    const env = {SERVER_PORT: port}\n\n    // When\n    const got = appPort(env)\n\n    // Then\n    expect(got).toBe(1234)\n  })\n\n  test('returns undefined value when SERVER_PORT is not defined', () => {\n    // Given\n    const env = {}\n\n    // When\n    const got = appPort(env)\n\n    // Then\n    expect(got).toBeUndefined()\n  })\n\n  test('returns undefined value when SERVER_PORT is malformed', () => {\n    // Given\n    const port = 'invalid-port-number'\n    const env = {SERVER_PORT: port}\n\n    // When\n    const got = appPort(env)\n\n    // Then\n    expect(got).toBeUndefined()\n  })\n})\n\ndescribe('appHost', () => {\n  test('returns the value of SPIN_APP_HOST', () => {\n    // Given\n    const host = '1p-app-host.spin.domain.dev'\n    const env = {SPIN_APP_HOST: host}\n\n    // When\n    const got = appHost(env)\n\n    // Then\n    expect(got).toBe(host)\n  })\n\n  test('returns undefined value when SPIN_APP_HOST is not defined', () => {\n    // Given\n    const env = {}\n\n    // When\n    const got = appHost(env)\n\n    // Then\n    expect(got).toBeUndefined()\n  })\n})\n"]}