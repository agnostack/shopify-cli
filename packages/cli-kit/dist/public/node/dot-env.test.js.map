{"version":3,"file":"dot-env.test.js","sourceRoot":"","sources":["../../../src/public/node/dot-env.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,mBAAmB,EAAE,YAAY,EAAE,kBAAkB,EAAE,WAAW,EAAC,MAAM,cAAc,CAAA;AAC/F,OAAO,EAAC,oBAAoB,EAAE,SAAS,EAAE,QAAQ,EAAC,MAAM,SAAS,CAAA;AACjE,OAAO,EAAC,QAAQ,EAAC,MAAM,WAAW,CAAA;AAClC,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAC,MAAM,QAAQ,CAAA;AAE7C,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC5D,aAAa;QACb,MAAM,UAAU,GAAG,oBAAoB,CAAA;QACvC,MAAM,MAAM,CAAC,KAAK,IAAI,EAAE;YACtB,MAAM,kBAAkB,CAAC,UAAU,CAAC,CAAA;QACtC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC,CAAA;IACrD,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC1C,QAAQ;YACR,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YAC3C,MAAM,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,CAAA;YAEtC,OAAO;YACP,MAAM,GAAG,GAAG,MAAM,kBAAkB,CAAC,UAAU,CAAC,CAAA;YAEhD,OAAO;YACP,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;YACpC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QAC1C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC1C,QAAQ;YACR,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YAE3C,OAAO;YACP,MAAM,WAAW,CAAC;gBAChB,IAAI,EAAE,UAAU;gBAChB,SAAS,EAAE;oBACT,GAAG,EAAE,KAAK;iBACX;aACF,CAAC,CAAA;YACF,MAAM,GAAG,GAAG,MAAM,kBAAkB,CAAC,UAAU,CAAC,CAAA;YAEhD,OAAO;YACP,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;YACpC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QAC1C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC1C,QAAQ;YACR,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YAC3C,MAAM,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,CAAA;YAEtC,OAAO;YACP,MAAM,WAAW,CAAC;gBAChB,IAAI,EAAE,UAAU;gBAChB,SAAS,EAAE;oBACT,IAAI,EAAE,MAAM;iBACb;aACF,CAAC,CAAA;YACF,MAAM,GAAG,GAAG,MAAM,kBAAkB,CAAC,UAAU,CAAC,CAAA;YAEhD,OAAO;YACP,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;YACpC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAC5C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,CAAC,mEAAmE,EAAE,KAAK,IAAI,EAAE;QACnF,MAAM,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC1C,QAAQ;YACR,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YAC3C,MAAM,SAAS,CAAC,UAAU,EAAE,2CAA2C,CAAC,CAAA;YAExE,OAAO;YACP,MAAM,GAAG,GAAG,MAAM,kBAAkB,CAAC,UAAU,CAAC,CAAA;YAChD,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;gBAC5B,GAAG,EAAE,KAAK;gBACV,GAAG,EAAE,KAAK;gBACV,GAAG,EAAE,KAAK;aACX,CAAC,CAAA;YAEF,OAAO;YACP,MAAM,cAAc,GAAG,YAAY,CAAC,MAAM,QAAQ,CAAC,UAAU,CAAC,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC,CAAA;YAC7E,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,wCAAwC,CAAC,CAAA;QAC1E,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;QAC9F,MAAM,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC1C,QAAQ;YACR,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YAC3C,MAAM,SAAS,CAAC,UAAU,EAAE,uDAAuD,CAAC,CAAA;YAEpF,OAAO;YACP,MAAM,GAAG,GAAG,MAAM,kBAAkB,CAAC,UAAU,CAAC,CAAA;YAChD,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;gBAC5B,GAAG,EAAE,KAAK;gBACV,GAAG,EAAE,KAAK;gBACV,GAAG,EAAE,KAAK;gBACV,GAAG,EAAE,MAAM;aACZ,CAAC,CAAA;YAEF,OAAO;YACP,MAAM,cAAc,GAAG,YAAY,CAAC,MAAM,QAAQ,CAAC,UAAU,CAAC,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC,CAAA;YAC7E,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,oDAAoD,CAAC,CAAA;QACtF,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {DotEnvNotFoundError, patchEnvFile, readAndParseDotEnv, writeDotEnv} from './dot-env.js'\nimport {inTemporaryDirectory, writeFile, readFile} from './fs.js'\nimport {joinPath} from './path.js'\nimport {describe, expect, test} from 'vitest'\n\ndescribe('readAndParseDotEnv', () => {\n  test('throws an error if the file does not exist', async () => {\n    // Given/When\n    const dotEnvPath = '/invalid/path/.env'\n    await expect(async () => {\n      await readAndParseDotEnv(dotEnvPath)\n    }).rejects.toEqual(DotEnvNotFoundError(dotEnvPath))\n  })\n\n  test('returns the file if it exists and the format is valid', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const dotEnvPath = joinPath(tmpDir, '.env')\n      await writeFile(dotEnvPath, 'FOO=BAR')\n\n      // When\n      const got = await readAndParseDotEnv(dotEnvPath)\n\n      // Then\n      expect(got.path).toEqual(dotEnvPath)\n      expect(got.variables.FOO).toEqual('BAR')\n    })\n  })\n})\n\ndescribe('writeDotEnv', () => {\n  test('creates a file if the .env does not exist', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const dotEnvPath = joinPath(tmpDir, '.env')\n\n      // When\n      await writeDotEnv({\n        path: dotEnvPath,\n        variables: {\n          FOO: 'BAR',\n        },\n      })\n      const got = await readAndParseDotEnv(dotEnvPath)\n\n      // Then\n      expect(got.path).toEqual(dotEnvPath)\n      expect(got.variables.FOO).toEqual('BAR')\n    })\n  })\n\n  test('overrides any existing file', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const dotEnvPath = joinPath(tmpDir, '.env')\n      await writeFile(dotEnvPath, 'FOO=BAR')\n\n      // When\n      await writeDotEnv({\n        path: dotEnvPath,\n        variables: {\n          FOO2: 'BAR2',\n        },\n      })\n      const got = await readAndParseDotEnv(dotEnvPath)\n\n      // Then\n      expect(got.path).toEqual(dotEnvPath)\n      expect(got.variables.FOO2).toEqual('BAR2')\n    })\n  })\n})\n\ndescribe('patchEnvFile', () => {\n  test('patches an environment file without changing not relevant content', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const dotEnvPath = joinPath(tmpDir, '.env')\n      await writeFile(dotEnvPath, 'FOO=BAR\\nABC   =XYZ\\n#Wow!\\n\\n  DEF  =GHI')\n\n      // When\n      const got = await readAndParseDotEnv(dotEnvPath)\n      expect(got.variables).toEqual({\n        FOO: 'BAR',\n        ABC: 'XYZ',\n        DEF: 'GHI',\n      })\n\n      // Then\n      const patchedContent = patchEnvFile(await readFile(dotEnvPath), {ABC: '123'})\n      expect(patchedContent).toEqual('FOO=BAR\\nABC=123\\n#Wow!\\n\\n  DEF  =GHI')\n    })\n  })\n\n  test('patches an environment file without changing not relevant content in Windows', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const dotEnvPath = joinPath(tmpDir, '.env')\n      await writeFile(dotEnvPath, 'FOO=BAR\\nABC   =XYZ\\n#Wow!\\n\\n  DEF  =GHI\\r\\nWIN=DOWS')\n\n      // When\n      const got = await readAndParseDotEnv(dotEnvPath)\n      expect(got.variables).toEqual({\n        FOO: 'BAR',\n        ABC: 'XYZ',\n        DEF: 'GHI',\n        WIN: 'DOWS',\n      })\n\n      // Then\n      const patchedContent = patchEnvFile(await readFile(dotEnvPath), {ABC: '123'})\n      expect(patchedContent).toEqual('FOO=BAR\\nABC=123\\n#Wow!\\n\\n  DEF  =GHI\\r\\nWIN=DOWS')\n    })\n  })\n})\n"]}