{"version":3,"file":"environments.test.js","sourceRoot":"","sources":["../../../src/public/node/environments.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as environments from './environments.js'\nimport {encodeToml as tomlEncode} from './toml.js'\nimport {inTemporaryDirectory, writeFile} from './fs.js'\nimport {joinPath} from './path.js'\nimport {describe, expect, test} from 'vitest'\n\nconst fileName = 'shopify.environments.toml'\nconst environment1 = {\n  flag1: 'value',\n  flag2: true,\n  flag3: 0,\n  flag4: ['hello', 'world'],\n}\nconst environment2 = {\n  flag1: 'value2',\n  flag2: false,\n  flag3: 1,\n  flag4: ['goodbye', 'world'],\n}\n\ndescribe('loading environments', async () => {\n  test('returns undefined when no environments file exists', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given / When\n      const loaded = await environments.loadEnvironment('environment1', fileName, {from: tmpDir})\n\n      // Then\n      expect(loaded).toBeUndefined()\n    })\n  })\n\n  test('returns undefined when an empty environments file exists', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const filePath = joinPath(tmpDir, fileName)\n      await writeFile(filePath, '# no content')\n\n      // When\n      const loaded = await environments.loadEnvironment('environment1', fileName, {from: tmpDir})\n\n      // Then\n      expect(loaded).toBeUndefined()\n    })\n  })\n\n  test('returns undefined when the environment does not exist', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const filePath = joinPath(tmpDir, fileName)\n      await writeFile(filePath, tomlEncode({environments: {environment1, environment2}}))\n\n      // When\n      const loaded = await environments.loadEnvironment('wrong', fileName, {from: tmpDir})\n\n      // Then\n      expect(loaded).toBeUndefined()\n    })\n  })\n\n  test('returns the environment when it exists', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const filePath = joinPath(tmpDir, fileName)\n      await writeFile(filePath, tomlEncode({environments: {environment1, environment2}}))\n\n      // When\n      const loaded = await environments.loadEnvironment('environment1', fileName, {from: tmpDir})\n\n      // Then\n      expect(loaded).toEqual(environment1)\n    })\n  })\n})\n"]}