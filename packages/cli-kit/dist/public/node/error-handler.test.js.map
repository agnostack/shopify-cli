{"version":3,"file":"error-handler.test.js","sourceRoot":"","sources":["../../../src/public/node/error-handler.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {errorHandler, cleanStackFrameFilePath, addBugsnagMetadata, sendErrorToBugsnag} from './error-handler.js'\nimport {ciPlatform, cloudEnvironment, isUnitTest, macAddress} from './context/local.js'\nimport {mockAndCaptureOutput} from './testing/output.js'\nimport * as error from './error.js'\nimport {hashString} from '../../public/node/crypto.js'\nimport {beforeEach, describe, expect, test, vi} from 'vitest'\n\nconst onNotify = vi.fn()\n\nvi.mock('process')\nvi.mock('../../private/node/error-handler.js', () => {\n  return {\n    Bugsnag: {\n      notify: (reportedError: any, args: any, callback: any) => {\n        onNotify(reportedError)\n        callback(null)\n      },\n      isStarted: () => true,\n    },\n  }\n})\nvi.mock('./cli.js')\nvi.mock('./context/local.js')\nvi.mock('../../public/node/crypto.js')\n\nbeforeEach(() => {\n  vi.mocked(ciPlatform).mockReturnValue({isCI: true, name: 'vitest', metadata: {}})\n  vi.mocked(macAddress).mockResolvedValue('macAddress')\n  vi.mocked(cloudEnvironment).mockReturnValue({platform: 'spin', editor: false})\n  vi.mocked(hashString).mockReturnValue('hashed-macaddress')\n  vi.mocked(isUnitTest).mockReturnValue(true)\n})\n\ndescribe('errorHandler', () => {\n  test('finishes the execution without exiting the proccess when cancel execution exception is raised', async () => {\n    // Given\n    vi.spyOn(process, 'exit').mockResolvedValue(null as never)\n\n    // When\n    errorHandler(new error.CancelExecution())\n\n    // Then\n    expect(process.exit).toBeCalledTimes(0)\n  })\n\n  test('finishes the execution without exiting the proccess and display a custom message when cancel execution exception is raised with a message', async () => {\n    // Given\n    vi.spyOn(process, 'exit').mockResolvedValue(null as never)\n    const outputMock = mockAndCaptureOutput()\n\n    // When\n    errorHandler(new error.CancelExecution('Custom message'))\n\n    // Then\n    expect(outputMock.info()).toMatch('âœ¨  Custom message')\n    expect(process.exit).toBeCalledTimes(0)\n  })\n\n  test('finishes the execution gracefully and exits the proccess when abort silent exception', async () => {\n    // Given\n    vi.spyOn(process, 'exit').mockResolvedValue(null as never)\n\n    // When\n    errorHandler(new error.AbortSilentError())\n\n    // Then\n    expect(process.exit).toBeCalledTimes(1)\n    expect(process.exit).toBeCalledWith(1)\n  })\n})\n\ndescribe('bugsnag stack cleaning', () => {\n  test.each([\n    ['dependency in relative path', 'cool-project/node_modules/deppy/foo/bar.ts', 'deppy/foo/bar.ts'],\n    ['dependency in absolute path', '/Users/ju/Desktop/cool/node_modules/deppy/foo/bar.ts', 'deppy/foo/bar.ts'],\n    ['plugin in project', 'node_modules/@plugin/name/foo/bar.ts', '@plugin/name/foo/bar.ts'],\n    ['plugin outside project', '/global/node_modules/@plugin/global/foo/bar.ts', '@plugin/global/foo/bar.ts'],\n    ['some relative path', 'users/own/code.ts', 'users/own/code.ts'],\n    ['some absolute path', '/global/code.ts', '/global/code.ts'],\n    [\n      'plugin in a complex location',\n      'node_modules/.something/@plugin+complex/@plugin/complex-path/foo/bar.ts',\n      '@plugin/complex-path/foo/bar.ts',\n    ],\n  ])('%s', (_, path, result) => {\n    expect(\n      cleanStackFrameFilePath({\n        currentFilePath: path,\n        projectRoot: '/my/project',\n        pluginLocations: [\n          {\n            name: '@plugin/name',\n            pluginPath: '/my/project/node_modules/@plugin/name',\n          },\n          {\n            name: '@plugin/global',\n            pluginPath: '/global/node_modules/@plugin/global',\n          },\n          {\n            name: '@plugin/complex-path',\n            pluginPath: '/my/project/node_modules/.something/@plugin+complex/@plugin/complex-path',\n          },\n        ],\n      }),\n    ).toEqual(result)\n  })\n})\n\ndescribe('bugsnag metadata', () => {\n  test('includes public data', async () => {\n    const event = {\n      addMetadata: vi.fn(),\n    }\n    const mockConfig = {\n      runHook: () => Promise.resolve({successes: []}),\n      plugins: [],\n    }\n    await addBugsnagMetadata(event as any, mockConfig as any)\n    expect(event.addMetadata).toHaveBeenCalled()\n  })\n})\n\ndescribe('send to Bugsnag', () => {\n  test('processes Error instances', async () => {\n    const toThrow = new Error('In test')\n    const res = await sendErrorToBugsnag(toThrow)\n    expect(res.reported).toEqual(true)\n\n    const {error} = res as any\n\n    expect(error.stack).toMatch(/^Error: In test/)\n    expect(error.stack).not.toEqual(toThrow.stack)\n    expect(onNotify).toHaveBeenCalledWith(res.error)\n  })\n\n  test('processes string instances', async () => {\n    const res = await sendErrorToBugsnag('In test' as any)\n    expect(res.reported).toEqual(true)\n    const {error} = res as any\n    expect(error.stack).toMatch(/^Error: In test/)\n    expect(onNotify).toHaveBeenCalledWith(res.error)\n  })\n\n  test('ignores fatals', async () => {\n    const res = await sendErrorToBugsnag(new error.AbortError('In test'))\n    expect(res.reported).toEqual(false)\n    expect(onNotify).not.toHaveBeenCalled()\n  })\n\n  test.each([null, undefined, {}, {message: 'nope'}])('deals with strange things to throw %s', async (throwable) => {\n    const res = await sendErrorToBugsnag(throwable)\n    expect(res.reported).toEqual(false)\n    expect(onNotify).not.toHaveBeenCalled()\n  })\n})\n"]}