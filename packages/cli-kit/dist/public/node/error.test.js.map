{"version":3,"file":"error.test.js","sourceRoot":"","sources":["../../../src/public/node/error.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,yBAAyB,EAAC,MAAM,YAAY,CAAA;AACnF,OAAO,EAAC,gBAAgB,EAAC,MAAM,SAAS,CAAA;AACxC,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAC,MAAM,QAAQ,CAAA;AAEjD,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;AAElB,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IACvB,IAAI,CAAC,0EAA0E,EAAE,KAAK,IAAI,EAAE;QAC1F,QAAQ;QACR,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,eAAe,EAAE,aAAa,CAAC,CAAA;QACjE,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;QAEjD,OAAO;QACP,MAAM,OAAO,CAAC,UAAU,CAAC,CAAA;QAEzB,OAAO;QACP,MAAM,CAAC,gBAAgB,CAAC,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAA;IAC3D,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,wEAAwE,EAAE,KAAK,IAAI,EAAE;QACxF,QAAQ;QACR,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,eAAe,EAAE,aAAa,CAAC,CAAA;QAC7D,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;QAEjD,OAAO;QACP,MAAM,OAAO,CAAC,QAAQ,CAAC,CAAA;QAEvB,OAAO;QACP,MAAM,CAAC,gBAAgB,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAA;IACzD,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,2FAA2F,EAAE,KAAK,IAAI,EAAE;QAC3G,QAAQ;QACR,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,CAAA;QACzC,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;QAEjD,OAAO;QACP,MAAM,OAAO,CAAC,YAAY,CAAC,CAAA;QAE3B,OAAO;QACP,MAAM,CAAC,gBAAgB,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,CAAA;QAClG,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAC,CAAC,CAAA;IAC/D,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,IAAI,CAAC,IAAI,CAAC;QACR,CAAC,iBAAiB,EAAE,4BAA4B,CAAC;QACjD,CAAC,iBAAiB,EAAE,iCAAiC,CAAC;QACtD,CAAC,cAAc,EAAE,qBAAqB,CAAC;QACvC,CAAC,iBAAiB,EAAE,yBAAyB,CAAC;KAC/C,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE;QACnB,MAAM,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAA;IACxE,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {AbortError, BugError, handler, cleanSingleStackTracePath} from './error.js'\nimport {renderFatalError} from './ui.js'\nimport {describe, expect, test, vi} from 'vitest'\n\nvi.mock('./ui.js')\n\ndescribe('handler', () => {\n  test('error output uses same input error instance when the error type is abort', async () => {\n    // Given\n    const abortError = new AbortError('error message', 'try message')\n    vi.mocked(renderFatalError).mockResolvedValue('')\n\n    // When\n    await handler(abortError)\n\n    // Then\n    expect(renderFatalError).toHaveBeenCalledWith(abortError)\n  })\n\n  test('error output uses same input error instance when the error type is bug', async () => {\n    // Given\n    const bugError = new BugError('error message', 'try message')\n    vi.mocked(renderFatalError).mockResolvedValue('')\n\n    // When\n    await handler(bugError)\n\n    // Then\n    expect(renderFatalError).toHaveBeenCalledWith(bugError)\n  })\n\n  test('error output uses a BugError instance instance when the error type not extends from fatal', async () => {\n    // Given\n    const unknownError = new Error('Unknown')\n    vi.mocked(renderFatalError).mockResolvedValue('')\n\n    // When\n    await handler(unknownError)\n\n    // Then\n    expect(renderFatalError).toHaveBeenCalledWith(expect.objectContaining({type: expect.any(Number)}))\n    expect(unknownError).not.contains({type: expect.any(Number)})\n  })\n})\n\ndescribe('stack file path helpers', () => {\n  test.each([\n    ['simple file:///', 'file:///something/there.js'],\n    ['windows file://', 'file:///D:\\\\something\\\\there.js'],\n    ['unix no file', '/something/there.js'],\n    ['windows no file', 'D:\\\\something\\\\there.js'],\n  ])('%s', (_, path) => {\n    expect(cleanSingleStackTracePath(path)).toEqual('/something/there.js')\n  })\n})\n"]}