{"version":3,"file":"fs.test.js","sourceRoot":"","sources":["../../../src/public/node/fs.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createFileReadStream,\n  copyFile,\n  mkdir,\n  fileHasExecutablePermissions,\n  writeFile,\n  readFile,\n  inTemporaryDirectory,\n  fileExists,\n  moveFile,\n  chmod,\n  removeFile,\n  stripUpPath,\n  touchFile,\n  appendFile,\n  generateRandomNameForSubdirectory,\n  readFileSync,\n  glob,\n} from './fs.js'\nimport {joinPath} from './path.js'\nimport {takeRandomFromArray} from '../common/array.js'\nimport {describe, expect, test, vi} from 'vitest'\nimport FastGlob from 'fast-glob'\n\nvi.mock('../common/array.js')\nvi.mock('fast-glob')\n\ndescribe('inTemporaryDirectory', () => {\n  test('ties the lifecycle of the temporary directory to the lifecycle of the callback', async () => {\n    // Given\n    let gotTmpDir = ''\n\n    await inTemporaryDirectory(async (tmpDir) => {\n      gotTmpDir = tmpDir\n      const filePath = joinPath(tmpDir, 'test-file')\n      const content = 'test-content'\n      await writeFile(filePath, content)\n      await expect(fileExists(filePath)).resolves.toBe(true)\n    })\n\n    // Then\n    await expect(fileExists(gotTmpDir)).resolves.toBe(false)\n  })\n})\ndescribe('copy', () => {\n  test('copies the file', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const content = 'test'\n      const from = joinPath(tmpDir, 'from')\n      const to = joinPath(tmpDir, 'to')\n      await writeFile(from, content)\n\n      // When\n      await copyFile(from, to)\n\n      // Then\n      const got = await readFile(to)\n      expect(got).toEqual(content)\n    })\n  })\n\n  test('copies the directory recursively including dot files', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const content = 'test'\n      const from = joinPath(tmpDir, 'from')\n      const fromChild = joinPath(from, 'child')\n      const to = joinPath(tmpDir, 'to')\n      await mkdir(from)\n      await mkdir(fromChild)\n      await writeFile(joinPath(from, 'file'), content)\n      await writeFile(joinPath(fromChild, '.dotfile'), content)\n\n      // When\n      await copyFile(from, to)\n\n      // Then\n      await expect(readFile(joinPath(to, 'file'))).resolves.toEqual(content)\n      await expect(readFile(joinPath(to, 'child', '.dotfile'))).resolves.toEqual(content)\n    })\n  })\n})\n\ndescribe('move', () => {\n  test('moves files', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const content = 'test'\n      const from = joinPath(tmpDir, 'from')\n      const to = joinPath(tmpDir, 'to')\n      await writeFile(from, content)\n\n      // When\n      await moveFile(from, to)\n\n      // Then\n      const got = await readFile(to)\n      expect(got).toEqual(content)\n    })\n  })\n})\n\ndescribe('exists', () => {\n  test('returns true when the file exists', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const content = 'test'\n      const filePath = joinPath(tmpDir, 'from')\n      await writeFile(filePath, content)\n\n      // When\n      const got = await fileExists(filePath)\n\n      // Then\n      expect(got).toEqual(true)\n    })\n  })\n\n  test('returns false when the file does not exist', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const filePath = joinPath(tmpDir, 'from')\n\n      // When\n      const got = await fileExists(filePath)\n\n      // Then\n      expect(got).toEqual(false)\n    })\n  })\n})\n\ndescribe('chmod', () => {\n  test('changes the permissions of a file', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const content = 'test'\n      const filePath = joinPath(tmpDir, 'from')\n      await writeFile(filePath, content)\n\n      // When\n      await chmod(filePath, '777')\n\n      // Then\n      await expect(fileHasExecutablePermissions(filePath)).resolves.toEqual(true)\n    })\n  })\n})\n\ndescribe('remove', () => {\n  test('removes a file', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const content = 'test'\n      const filePath = joinPath(tmpDir, 'from')\n      await writeFile(filePath, content)\n\n      // When\n      await removeFile(filePath)\n\n      // Then\n      await expect(fileExists(filePath)).resolves.toEqual(false)\n    })\n  })\n})\n\ndescribe('stripUp', () => {\n  test('strips the given amount of leading directories', async () => {\n    // Given\n    const filePath = 'a/b/c/d/e'\n\n    // When\n    const newFilePath1 = stripUpPath(filePath, 1)\n    const newFilePath2 = stripUpPath(filePath, 2)\n    const newFilePath3 = stripUpPath(filePath, 3)\n\n    // Then\n    await expect(newFilePath1).toEqual('b/c/d/e')\n    await expect(newFilePath2).toEqual('c/d/e')\n    await expect(newFilePath3).toEqual('d/e')\n  })\n})\n\ndescribe('appendFile', () => {\n  test('it appends content to an existing file', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      const filePath = joinPath(tmpDir, 'test-file')\n      const content = 'test-content'\n      await touchFile(filePath)\n      await appendFile(filePath, content)\n      await expect(readFile(filePath)).resolves.toContain(content)\n    })\n  })\n})\n\ndescribe('makeDirectoryWithRandomName', () => {\n  test('rerolls the name if a directory exists with the same name', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      vi.mocked(takeRandomFromArray).mockReturnValueOnce('taken')\n      vi.mocked(takeRandomFromArray).mockReturnValueOnce('directory')\n      vi.mocked(takeRandomFromArray).mockReturnValueOnce('free')\n      vi.mocked(takeRandomFromArray).mockReturnValueOnce('directory')\n\n      const content = 'test'\n      const filePath = joinPath(tmpDir, 'taken-directory-app')\n      await writeFile(filePath, content)\n\n      // When\n      const got = await generateRandomNameForSubdirectory({suffix: 'app', directory: tmpDir})\n\n      // Then\n      expect(got).toEqual('free-directory-app')\n      expect(takeRandomFromArray).toHaveBeenCalledTimes(4)\n    })\n  })\n})\n\ndescribe('readFileSync', () => {\n  test('synchronously reads content of file', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      const filePath = joinPath(tmpDir, 'test-file')\n      const content = 'test-content'\n      await touchFile(filePath)\n      await appendFile(filePath, content)\n      await expect(readFileSync(filePath).toString()).toContain(content)\n    })\n  })\n})\n\ndescribe('createFileReadStream', () => {\n  test('creates a readable stream for a file', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      const filePath = joinPath(tmpDir, 'test-file')\n      const content = 'test-content'\n      await touchFile(filePath)\n      await appendFile(filePath, content)\n      const stream = createFileReadStream(filePath)\n      let data = ''\n      stream.on('data', (chunk) => {\n        data += chunk\n      })\n      stream.on('end', () => {\n        expect(data).toBe(content)\n      })\n    })\n  })\n\n  test('creates a readable stream for a chunk of a file', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      const filePath = joinPath(tmpDir, 'test-file')\n      const content = 'test-content'\n      await touchFile(filePath)\n      await appendFile(filePath, content)\n\n      const stream = createFileReadStream(filePath, {start: 1, end: 7})\n      let data = ''\n      stream.on('data', (chunk) => {\n        data += chunk\n      })\n      stream.on('end', () => {\n        expect(data).toBe('est-con')\n      })\n    })\n  })\n})\n\ndescribe('glob', () => {\n  test('calls fastGlob with dot:true if no dot option is passed', async () => {\n    // When\n    await glob('pattern')\n\n    // Then\n    expect(FastGlob).toBeCalledWith('pattern', {dot: true})\n  })\n\n  test('calls fastGlob with dot option if passed', async () => {\n    // When\n    await glob('pattern', {dot: false})\n\n    // Then\n    expect(FastGlob).toBeCalledWith('pattern', {dot: false})\n  })\n})\n"]}