{"version":3,"file":"git.test.js","sourceRoot":"","sources":["../../../src/public/node/git.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as git from './git.js'\nimport {appendFileSync} from './fs.js'\nimport {hasGit} from './context/local.js'\nimport {beforeEach, describe, expect, test, vi} from 'vitest'\nimport simpleGit from 'simple-git'\n\nconst mockedClone = vi.fn(async () => ({current: 'Mocked'}))\nconst mockedInit = vi.fn(async () => {})\nconst mockedCheckIsRepo = vi.fn(async () => false)\nconst mockedGetConfig = vi.fn(async () => ({}))\nconst mockedGetLog = vi.fn(async () => ({}))\nconst mockedCommit = vi.fn(async () => ({}))\nconst mockedRaw = vi.fn(async () => '')\nconst mockedCheckout = vi.fn(async () => ({}))\nconst mockedGitStatus = vi.fn(async () => ({isClean: false}))\nconst simpleGitProperties = {\n  clone: mockedClone,\n  init: mockedInit,\n  checkIsRepo: mockedCheckIsRepo,\n  getConfig: mockedGetConfig,\n  log: mockedGetLog,\n  commit: mockedCommit,\n  raw: mockedRaw,\n  checkoutLocalBranch: mockedCheckout,\n  status: mockedGitStatus,\n}\n\nvi.mock('./context/local.js')\nvi.mock('./fs.js')\nvi.mock('simple-git')\n\nbeforeEach(() => {\n  vi.mocked(hasGit).mockResolvedValue(true)\n  vi.mocked<any>(simpleGit).mockReturnValue(simpleGitProperties)\n})\n\ndescribe('downloadRepository()', async () => {\n  test('calls simple-git to clone a repo without branch', async () => {\n    // Given\n    const repoUrl = 'http://repoUrl'\n    const destination = 'destination'\n    const options: any = {'--recurse-submodules': null}\n\n    // When\n    await git.downloadGitRepository({repoUrl, destination})\n\n    // Then\n    expect(mockedClone).toHaveBeenCalledWith(repoUrl, destination, options)\n  })\n\n  test('calls simple-git to clone a repo with branch', async () => {\n    // Given\n    const repoUrl = 'http://repoUrl#my-branch'\n    const destination = 'destination'\n    const options: any = {'--recurse-submodules': null, '--branch': 'my-branch'}\n\n    // When\n    await git.downloadGitRepository({repoUrl, destination})\n\n    // Then\n    expect(mockedClone).toHaveBeenCalledWith('http://repoUrl', destination, options)\n  })\n\n  test('fails when the shallow and latestTag properties are passed', async () => {\n    await expect(async () => {\n      // Given\n      const repoUrl = 'http://repoUrl'\n      const destination = 'destination'\n      const shallow = true\n      const latestTag = true\n\n      // When\n      await git.downloadGitRepository({repoUrl, destination, shallow, latestTag})\n\n      // Then\n    }).rejects.toThrowError(/Git can't clone the latest release with the 'shallow' property/)\n  })\n\n  test('fails when the branch and latestTag properties are passed', async () => {\n    await expect(async () => {\n      // Given\n      const repoUrl = 'http://repoUrl#my-branch'\n      const destination = 'destination'\n      const latestTag = true\n\n      // When\n      await git.downloadGitRepository({repoUrl, destination, latestTag})\n\n      // Then\n    }).rejects.toThrowError(/Git can't clone the latest release with a 'branch'/)\n  })\n\n  test(\"fails when the latestTag doesn't exist \", async () => {\n    await expect(async () => {\n      // Given\n      const repoUrl = 'http://repoUrl'\n      const destination = 'destination'\n      const latestTag = true\n      const mockedTags = vi.fn(async () => ({\n        all: [],\n        latest: undefined,\n      }))\n\n      vi.mocked<any>(simpleGit).mockReturnValue({\n        ...simpleGitProperties,\n        tags: mockedTags,\n      })\n\n      // When\n      await git.downloadGitRepository({repoUrl, destination, latestTag})\n\n      // Then\n    }).rejects.toThrowError(/Couldn't obtain the most recent tag of the repository http:\\/\\/repoUrl/)\n  })\n\n  test('calls simple-git to clone a repo with branch and checkouts the latest release', async () => {\n    // Given\n    const repoUrl = 'http://repoUrl'\n    const destination = 'destination'\n    const latestTag = true\n    const options: any = {'--recurse-submodules': null}\n    const expectedLatestTag = '1.2.3'\n    const mockedTags = vi.fn(async () => ({\n      all: [],\n      latest: expectedLatestTag,\n    }))\n    const mockCheckout = vi.fn(async () => ({current: 'Mocked'}))\n\n    vi.mocked<any>(simpleGit).mockReturnValue({\n      ...simpleGitProperties,\n      tags: mockedTags,\n      checkout: mockCheckout,\n    })\n\n    // When\n    await git.downloadGitRepository({repoUrl, destination, latestTag})\n\n    // Then\n    expect(mockedClone).toHaveBeenCalledWith('http://repoUrl', destination, options)\n    expect(mockCheckout).toHaveBeenCalledWith(expectedLatestTag)\n  })\n})\n\ndescribe('initializeRepository()', () => {\n  test('calls simple-git to init a repo in the given directory', async () => {\n    // Given\n    const directory = '/tmp/git-repo'\n\n    // When\n    await git.initializeGitRepository(directory, 'my-branch')\n\n    // Then\n    expect(simpleGit).toHaveBeenCalledOnce()\n    expect(simpleGit).toHaveBeenCalledWith('/tmp/git-repo')\n\n    expect(mockedInit).toHaveBeenCalledOnce()\n    expect(mockedCheckout).toHaveBeenCalledOnce()\n    expect(mockedCheckout).toHaveBeenCalledWith('my-branch')\n  })\n})\n\ndescribe('createGitIgnore()', () => {\n  test('writes to a file in the provided directory', async () => {\n    const mockedAppendSync = vi.fn()\n    vi.mocked(appendFileSync).mockImplementation(mockedAppendSync)\n    const directory = '/unit/test'\n    const template = {\n      section: ['first', 'second'],\n    }\n\n    git.createGitIgnore(directory, template)\n\n    expect(mockedAppendSync).toHaveBeenCalledOnce()\n    expect(mockedAppendSync.mock.lastCall?.[0]).toBe(`${directory}/.gitignore`)\n    expect(mockedAppendSync.mock.lastCall?.[1]).toBe('# section\\nfirst\\nsecond\\n\\n')\n  })\n})\n\ndescribe('getLatestCommit()', () => {\n  test('gets the latest commit through git log', async () => {\n    const latestCommit = {key: 'value'}\n\n    mockedGetLog.mockResolvedValue({latest: latestCommit, all: [latestCommit], total: 1})\n\n    await expect(git.getLatestGitCommit()).resolves.toBe(latestCommit)\n  })\n  test('throws if no latest commit is found', async () => {\n    mockedGetLog.mockResolvedValue({latest: null, all: [], total: 0})\n\n    await expect(() => git.getLatestGitCommit()).rejects.toThrowError(/Must have at least one commit to run command/)\n  })\n  test('passes the directory option to simple git', async () => {\n    // Given\n    const directory = '/test/directory'\n    const latestCommit = {key: 'value'}\n    mockedGetLog.mockResolvedValue({latest: latestCommit, all: [latestCommit], total: 1})\n\n    // When\n    await git.getLatestGitCommit(directory)\n\n    // Then\n    expect(simpleGit).toHaveBeenCalledWith({baseDir: directory})\n  })\n})\n\ndescribe('addAll()', () => {\n  test('builds valid raw command', async () => {\n    const directory = '/test/directory'\n\n    await git.addAllToGitFromDirectory(directory)\n\n    expect(mockedRaw).toHaveBeenCalledOnce()\n    expect(mockedRaw).toHaveBeenCalledWith('add', '--all')\n    expect(simpleGit).toHaveBeenCalledWith({baseDir: directory})\n  })\n})\n\ndescribe('commit()', () => {\n  test('calls simple-git commit method', async () => {\n    mockedCommit.mockResolvedValue({commit: 'sha'})\n    const commitMsg = 'my msg'\n\n    const commitSha = await git.createGitCommit(commitMsg)\n\n    expect(mockedCommit).toHaveBeenCalledOnce()\n    expect(mockedCommit).toHaveBeenCalledWith(commitMsg, undefined)\n    expect(commitSha).toBe('sha')\n  })\n  test('passes options to relevant function', async () => {\n    const author = 'Vincent Lynch <vincent.lynch@shopify.com>'\n    const directory = '/some/path'\n    mockedCommit.mockResolvedValue({commit: 'sha'})\n\n    await git.createGitCommit('msg', {author, directory})\n\n    expect(simpleGit).toHaveBeenCalledWith({baseDir: directory})\n    expect(mockedCommit).toHaveBeenCalledWith('msg', {'--author': author})\n  })\n})\n\ndescribe('getHeadSymbolicRef()', () => {\n  test('gets git HEAD symbolic reference', async () => {\n    const testRef = 'refs/heads/my-test-branch'\n    mockedRaw.mockResolvedValue(testRef)\n\n    await expect(git.getHeadSymbolicRef()).resolves.toBe(testRef)\n  })\n  test('throws if HEAD is detached', async () => {\n    mockedRaw.mockResolvedValue('')\n\n    await expect(() => git.getHeadSymbolicRef()).rejects.toThrowError(/Git HEAD can't be detached to run command/)\n  })\n  test('passes the directory option to simple git', async () => {\n    const directory = '/test/directory'\n    mockedRaw.mockResolvedValue('ref/unit')\n\n    await git.getHeadSymbolicRef(directory)\n\n    expect(simpleGit).toHaveBeenCalledWith({baseDir: directory})\n  })\n})\n\ndescribe('ensurePresentOrAbort()', () => {\n  test('throws an error if git is not present', async () => {\n    // Given\n    vi.mocked(hasGit).mockResolvedValue(false)\n\n    // Then\n    await expect(() => git.ensureGitIsPresentOrAbort()).rejects.toThrowError(\n      /Git is necessary in the environment to continue/,\n    )\n  })\n\n  test(\"doesn't throw an error if Git is present\", async () => {\n    // Given\n    vi.mocked(hasGit).mockResolvedValue(true)\n\n    // Then\n    await expect(git.ensureGitIsPresentOrAbort()).resolves.toBeUndefined()\n  })\n})\n\ndescribe('ensureInsideGitDirectory()', () => {\n  test('throws an error if not inside a git directory', async () => {\n    // Given\n    mockedCheckIsRepo.mockResolvedValue(false)\n\n    // Then\n    await expect(() => git.ensureInsideGitDirectory()).rejects.toThrowError(/is not a Git directory/)\n  })\n\n  test(\"doesn't throw an error if inside a git directory\", async () => {\n    // Given\n    mockedCheckIsRepo.mockResolvedValue(true)\n\n    // Then\n    await expect(git.ensureInsideGitDirectory()).resolves.toBeUndefined()\n  })\n\n  test('passes the directory option to simple git', async () => {\n    // Given\n    const directory = '/test/directory'\n    mockedCheckIsRepo.mockResolvedValue(true)\n\n    // When\n    await git.ensureInsideGitDirectory(directory)\n\n    // Then\n    expect(simpleGit).toHaveBeenCalledWith({baseDir: directory})\n  })\n})\n\ndescribe('ensureIsClean()', () => {\n  test('throws an error if git directory is not clean', async () => {\n    // Given\n    mockedGitStatus.mockResolvedValue({isClean: false})\n\n    // Then\n    await expect(() => git.ensureIsClean()).rejects.toThrowError(/is not a clean Git directory/)\n  })\n\n  test(\"doesn't throw an error if git directory is clean\", async () => {\n    // Given\n    mockedGitStatus.mockResolvedValue({isClean: true})\n\n    // Then\n    await expect(git.ensureIsClean()).resolves.toBeUndefined()\n  })\n})\n\ndescribe('isGitClean()', () => {\n  test('return false if git directory is not clean', async () => {\n    // Given\n    mockedGitStatus.mockResolvedValue({isClean: false})\n\n    // Then\n    await expect(git.isClean()).resolves.toBe(false)\n  })\n\n  test('return true if git directory is not clean', async () => {\n    // Given\n    mockedGitStatus.mockResolvedValue({isClean: true})\n\n    // Then\n    await expect(git.isClean()).resolves.toBe(true)\n  })\n\n  test('passes the directory option to simple git', async () => {\n    // Given\n    mockedGitStatus.mockResolvedValue({isClean: true})\n    const directory = '/test/directory'\n\n    // When\n    await git.isClean(directory)\n\n    // Then\n    expect(simpleGit).toHaveBeenCalledWith({baseDir: directory})\n  })\n})\n"]}