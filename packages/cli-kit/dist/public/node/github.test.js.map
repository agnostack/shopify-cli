{"version":3,"file":"github.test.js","sourceRoot":"","sources":["../../../src/public/node/github.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  getLatestGitHubRelease,\n  parseGitHubRepositoryURL,\n  GithubRelease,\n  parseGitHubRepositoryReference,\n} from './github.js'\nimport {fetch} from './http.js'\nimport {Response} from 'node-fetch'\nimport {describe, expect, test, vi} from 'vitest'\n\nvi.mock('./http.js')\n\ndescribe('getLatestGitHubRelease', () => {\n  test('delegates to fetch', async () => {\n    // Given\n    const user = 'shopify'\n    const repo = 'hydrogen'\n    const allReleases = createMockRelease(3)\n    const response = new Response(JSON.stringify(allReleases), undefined)\n\n    vi.mocked(fetch).mockResolvedValue(response)\n\n    // When\n    const latest = await getLatestGitHubRelease(user, repo)\n\n    // Then\n    expect(vi.mocked(fetch)).toHaveBeenCalledWith(`https://api.github.com/repos/${user}/${repo}/releases`)\n    await expect(latest).toMatchObject(allReleases[0]!)\n  })\n\n  test('calls the filter function', async () => {\n    // Given\n    const filter = vi.fn()\n    const user = 'shopify'\n    const repo = 'hydrogen'\n    const allReleases = createMockRelease(4)\n    const response = new Response(JSON.stringify(allReleases), undefined)\n\n    vi.mocked(fetch).mockResolvedValue(response)\n\n    // When\n    const latest = await getLatestGitHubRelease(user, repo, {filter})\n\n    // Then\n    expect(vi.mocked(fetch)).toHaveBeenCalledWith(`https://api.github.com/repos/${user}/${repo}/releases`)\n    await expect(filter).toHaveBeenCalledTimes(4)\n  })\n})\n\ndescribe('parseGitHubRepositoryURL', () => {\n  ;[\n    'Shopify/hydrogen-app',\n    'github:Shopify/hydrogen-app',\n    'git@github.com:Shopify/hydrogen-app',\n    'https://github.com/Shopify/hydrogen-app',\n  ].forEach((url) => {\n    test(url, async () => {\n      const latest = parseGitHubRepositoryURL(url)\n      await expect(latest.valueOrAbort()).toMatchObject({\n        site: 'github.com',\n        user: 'Shopify',\n        name: 'hydrogen-app',\n        subDirectory: undefined,\n        ssh: 'git@github.com:Shopify/hydrogen-app',\n      })\n    })\n  })\n\n  test('supports sub directories', async () => {\n    // Given\n    const url = 'git@github.com:Shopify/hydrogen/examples/template-hydrogen-default'\n\n    // When\n    const latest = parseGitHubRepositoryURL(url)\n\n    // Then\n    await expect(latest.valueOrAbort()).toMatchObject({\n      site: 'github.com',\n      user: 'Shopify',\n      name: 'hydrogen',\n      subDirectory: 'examples/template-hydrogen-default',\n      ssh: 'git@github.com:Shopify/hydrogen',\n    })\n  })\n\n  test('supports branches with #', async () => {\n    // Given\n    const url = 'git@github.com:Shopify/hydrogen/examples/template-hydrogen-default#someBranch'\n\n    // When\n    const latest = parseGitHubRepositoryURL(url)\n\n    // Then\n    await expect(latest.valueOrAbort()).toMatchObject({\n      site: 'github.com',\n      user: 'Shopify',\n      name: 'hydrogen',\n      ref: 'someBranch',\n      subDirectory: 'examples/template-hydrogen-default',\n      ssh: 'git@github.com:Shopify/hydrogen',\n    })\n  })\n})\n\ndescribe('parseGitHubRepositoryReference', () => {\n  test('parses a repository reference', async () => {\n    // Given\n    const url = 'https://github.com/Shopify/foo'\n\n    // When\n    const repoUrl = parseGitHubRepositoryReference(url)\n\n    // Then\n    await expect(repoUrl).toMatchObject({\n      baseURL: 'https://github.com/Shopify/foo',\n      branch: undefined,\n      filePath: undefined,\n    })\n  })\n\n  test('parses a repository reference with a branch', async () => {\n    // Given\n    const url = 'https://github.com/Shopify/foo#main'\n\n    // When\n    const repoUrl = parseGitHubRepositoryReference(url)\n\n    // Then\n    await expect(repoUrl).toMatchObject({\n      baseURL: 'https://github.com/Shopify/foo',\n      branch: 'main',\n      filePath: undefined,\n    })\n  })\n\n  test('parses a repository reference with a branch and path', async () => {\n    // Given\n    const url = 'https://github.com/Shopify/foo/bar/baz#main'\n\n    // When\n    const repoUrl = parseGitHubRepositoryReference(url)\n\n    // Then\n    await expect(repoUrl).toMatchObject({\n      baseURL: 'https://github.com/Shopify/foo',\n      branch: 'main',\n      filePath: 'bar/baz',\n    })\n  })\n})\n\nfunction createMockRelease(size = 1, mocks: Partial<GithubRelease> = {}): GithubRelease[] {\n  return Array.from({length: size}, (_, index) => ({\n    id: index,\n    tag_name: 'v1.0.0',\n    tarball_url: '',\n    assets: [],\n    body: '',\n    draft: false,\n    prerelease: false,\n    created_at: '',\n    published_at: '',\n    url: '',\n    name: '',\n    ...mocks,\n  }))\n}\n"]}