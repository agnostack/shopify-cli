{"version":3,"file":"prerun.test.js","sourceRoot":"","sources":["../../../../src/public/node/hooks/prerun.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {parseCommandContent} from './prerun.js'\nimport {describe, expect, test} from 'vitest'\n\ndescribe('parseCommandContent', () => {\n  test('when a create command is used should return the correct command content', async () => {\n    // Given\n    const cmdInfo = {\n      id: 'init',\n      aliases: [],\n      pluginAlias: '@shopify/create-app',\n    }\n\n    // When\n    const got = parseCommandContent(cmdInfo)\n\n    // Then\n    expect(got).not.toBeUndefined()\n    expect(got.command).toBe('create-app')\n    expect(got.topic).toBeUndefined()\n    expect(got.alias).toBeUndefined()\n  })\n\n  test('when a normal command is used without topic should return the correct command content', async () => {\n    // Given\n    const cmdInfo = {\n      id: 'upgrade',\n      aliases: [],\n      pluginAlias: '@shopify/cli',\n    }\n\n    // When\n    const got = parseCommandContent(cmdInfo)\n\n    // Then\n    expect(got).not.toBeUndefined()\n    expect(got.command).toBe('upgrade')\n    expect(got.topic).toBeUndefined()\n    expect(got.alias).toBeUndefined()\n  })\n\n  test('when a normal command is with topic should return the correct command content', async () => {\n    // Given\n    const cmdInfo = {\n      id: 'app:dev',\n      aliases: [],\n      pluginAlias: '@shopify/cli',\n    }\n\n    // When\n    const got = parseCommandContent(cmdInfo)\n\n    // Then\n    expect(got).not.toBeUndefined()\n    expect(got.command).toBe('app dev')\n    expect(got.topic).toBe('app')\n    expect(got.alias).toBeUndefined()\n  })\n\n  test('when a normal command is with alias should return the correct command content', async () => {\n    // Given\n    const cmdInfo = {\n      id: 'upgrade',\n      aliases: ['upgradeAlias'],\n      pluginAlias: '@shopify/cli',\n    }\n    process.argv = ['upgradeAlias']\n\n    // When\n    const got = parseCommandContent(cmdInfo)\n\n    // Then\n    expect(got).not.toBeUndefined()\n    expect(got.command).toBe('upgrade')\n    expect(got.topic).toBeUndefined()\n    expect(got.alias).toBe('upgradeAlias')\n  })\n})\n"]}