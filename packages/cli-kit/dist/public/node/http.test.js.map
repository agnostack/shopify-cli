{"version":3,"file":"http.test.js","sourceRoot":"","sources":["../../../src/public/node/http.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAE,oBAAoB,EAAE,QAAQ,EAAC,MAAM,SAAS,CAAA;AAClE,OAAO,EAAC,YAAY,EAAC,MAAM,WAAW,CAAA;AACtC,OAAO,EAAC,QAAQ,EAAC,MAAM,WAAW,CAAA;AAClC,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAC,MAAM,QAAQ,CAAA;AACjD,OAAO,SAAS,EAAE,EAAC,QAAQ,EAAC,MAAM,YAAY,CAAA;AAC9C,OAAO,EAAC,QAAQ,EAAC,MAAM,QAAQ,CAAA;AAE/B,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;IAC/B,MAAM,MAAM,GAAQ,MAAM,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,CAAA;IACvD,OAAO;QACL,GAAG,MAAM;QACT,OAAO,EAAE,EAAE,CAAC,EAAE,EAAE;KACjB,CAAA;AACH,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC1C,QAAQ;YACR,MAAM,GAAG,GAAG,qBAAqB,CAAA;YACjC,MAAM,QAAQ,GAAG,kBAAkB,CAAA;YACnC,MAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;YACrC,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAA;YAE3D,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAA;YAEhD,OAAO;YACP,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,GAAG,EAAE,EAAE,CAAC,CAAA;YAC1C,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,CAAA;YACvC,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,MAAM,CAAC,CAAA;YAEvC,OAAO;YACP,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YACvB,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACzB,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;QACtC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {fileExists, inTemporaryDirectory, readFile} from './fs.js'\nimport {downloadFile} from './http.js'\nimport {joinPath} from './path.js'\nimport {describe, expect, test, vi} from 'vitest'\nimport nodeFetch, {Response} from 'node-fetch'\nimport {Readable} from 'stream'\n\nvi.mock('node-fetch', async () => {\n  const actual: any = await vi.importActual('node-fetch')\n  return {\n    ...actual,\n    default: vi.fn(),\n  }\n})\n\ndescribe('downloadFile', () => {\n  test('Downloads a file from a URL to a local path', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const url = 'https://example.com'\n      const filename = '/bin/example.txt'\n      const to = joinPath(tmpDir, filename)\n      const response = new Response(Readable.from('Hello world'))\n\n      vi.mocked(nodeFetch).mockResolvedValue(response)\n\n      // When\n      const result = await downloadFile(url, to)\n      const exists = await fileExists(result)\n      const contents = await readFile(result)\n\n      // Then\n      expect(result).toBe(to)\n      expect(exists).toBe(true)\n      expect(contents).toBe('Hello world')\n    })\n  })\n})\n"]}