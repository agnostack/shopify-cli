{"version":3,"file":"liquid.test.js","sourceRoot":"","sources":["../../../src/public/node/liquid.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,oBAAoB,EAAC,MAAM,SAAS,CAAA;AACxE,OAAO,EAAC,oBAAoB,EAAE,2BAA2B,EAAC,MAAM,aAAa,CAAA;AAC7E,OAAO,EAAC,QAAQ,EAAC,MAAM,WAAW,CAAA;AAClC,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAC,MAAM,QAAQ,CAAA;AAE7C,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,IAAI,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;QACvE,QAAQ;QACR,MAAM,eAAe,GAAG,cAAc,CAAA;QAEtC,OAAO;QACP,MAAM,GAAG,GAAG,MAAM,oBAAoB,CAAC,eAAe,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAA;QAE3E,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;IAC7B,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,IAAI,CAAC,kFAAkF,EAAE,KAAK,IAAI,EAAE;QAClG,QAAQ;QACR,MAAM,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC1C,QAAQ;YACR,MAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YACrC,MAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC,CAAA;YAC/C,MAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;YACjC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAA;YACjB,MAAM,KAAK,CAAC,YAAY,CAAC,CAAA;YACzB,MAAM,KAAK,CAAC,EAAE,CAAC,CAAA;YAEf,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAA;YACpD,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAA;YACrD,MAAM,eAAe,GAAG,QAAQ,CAAC,YAAY,EAAE,cAAc,CAAC,CAAA;YAC9D,MAAM,WAAW,GAAG,EAAC,IAAI,EAAE,SAAS,EAAC,CAAA;YACrC,MAAM,SAAS,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAA;YAC7C,MAAM,SAAS,CAAC,SAAS,EAAE,eAAe,CAAC,CAAA;YAC3C,MAAM,SAAS,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAA;YAE7D,OAAO;YACP,MAAM,2BAA2B,CAAC,IAAI,EAAE,EAAE,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAA;YAE/D,OAAO;YACP,MAAM,aAAa,GAAG,QAAQ,CAAC,EAAE,EAAE,UAAU,CAAC,CAAA;YAC9C,MAAM,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;YAEhE,MAAM,YAAY,GAAG,QAAQ,CAAC,EAAE,EAAE,eAAe,CAAC,CAAA;YAClD,MAAM,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA;YAEtE,MAAM,kBAAkB,GAAG,QAAQ,CAAC,EAAE,EAAE,uBAAuB,CAAC,CAAA;YAChE,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,kBAAkB,CAAC,CAAA;YACzD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;QACzD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {writeFile, mkdir, readFile, inTemporaryDirectory} from './fs.js'\nimport {renderLiquidTemplate, recursiveLiquidTemplateCopy} from './liquid.js'\nimport {joinPath} from './path.js'\nimport {describe, expect, test} from 'vitest'\n\ndescribe('create', () => {\n  test('replaces passes the content through the liquid engine', async () => {\n    // Given\n    const templateContent = '{{variable}}'\n\n    // When\n    const got = await renderLiquidTemplate(templateContent, {variable: 'test'})\n\n    // Then\n    expect(got).toEqual('test')\n  })\n})\n\ndescribe('recursiveLiquidTemplateCopy', () => {\n  test('copies the template and only runs liquid on the files with the .liquid extension', async () => {\n    // Given\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const from = joinPath(tmpDir, 'from')\n      const fromPackages = joinPath(from, 'packages')\n      const to = joinPath(tmpDir, 'to')\n      await mkdir(from)\n      await mkdir(fromPackages)\n      await mkdir(to)\n\n      const readmePath = joinPath(from, 'first.md.liquid')\n      const rawLiquid = joinPath(from, 'second.liquid.raw')\n      const packageJsonPath = joinPath(fromPackages, 'package.json')\n      const packageJson = {name: 'package'}\n      await writeFile(readmePath, '# {{variable}}')\n      await writeFile(rawLiquid, '# {{literal}}')\n      await writeFile(packageJsonPath, JSON.stringify(packageJson))\n\n      // When\n      await recursiveLiquidTemplateCopy(from, to, {variable: 'test'})\n\n      // Then\n      const outReadmePath = joinPath(to, 'first.md')\n      await expect(readFile(outReadmePath)).resolves.toEqual('# test')\n\n      const outRawLiquid = joinPath(to, 'second.liquid')\n      await expect(readFile(outRawLiquid)).resolves.toEqual('# {{literal}}')\n\n      const outPackageJsonPath = joinPath(to, 'packages/package.json')\n      const outPackageJson = await readFile(outPackageJsonPath)\n      expect(JSON.parse(outPackageJson)).toEqual(packageJson)\n    })\n  })\n})\n"]}