{"version":3,"file":"local-storage.test.js","sourceRoot":"","sources":["../../../src/public/node/local-storage.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAC,MAAM,oBAAoB,CAAA;AAC/C,OAAO,EAAC,oBAAoB,EAAC,MAAM,SAAS,CAAA;AAC5C,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAC,MAAM,QAAQ,CAAA;AAM7C,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IACvB,IAAI,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,oBAAoB,CAAC,CAAC,GAAG,EAAE,EAAE;YACjC,QAAQ;YACR,MAAM,OAAO,GAAG,IAAI,YAAY,CAAa,EAAC,GAAG,EAAC,CAAC,CAAA;YAEnD,OAAO;YACP,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;YAChC,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;YAEpC,OAAO;YACP,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAC7B,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,oBAAoB,CAAC,CAAC,GAAG,EAAE,EAAE;YACjC,QAAQ;YACR,MAAM,OAAO,GAAG,IAAI,YAAY,CAAa,EAAC,GAAG,EAAC,CAAC,CAAA;YAEnD,OAAO;YACP,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;YAChC,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;YACpC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;YAC3B,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;YAErC,OAAO;YACP,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;YAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;QACjC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;QACnC,MAAM,oBAAoB,CAAC,CAAC,GAAG,EAAE,EAAE;YACjC,QAAQ;YACR,MAAM,OAAO,GAAG,IAAI,YAAY,CAAa,EAAC,GAAG,EAAC,CAAC,CAAA;YAEnD,OAAO;YACP,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;YAChC,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;YACpC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;YAC3B,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,EAAE,CAAA;YAE5B,OAAO;YACP,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;YAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;QACjC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {LocalStorage} from './local-storage.js'\nimport {inTemporaryDirectory} from './fs.js'\nimport {describe, expect, test} from 'vitest'\n\ninterface TestSchema {\n  testValue: string\n}\n\ndescribe('storage', () => {\n  test('set and returns a value', async () => {\n    await inTemporaryDirectory((cwd) => {\n      // Given\n      const storage = new LocalStorage<TestSchema>({cwd})\n\n      // When\n      storage.set('testValue', 'test')\n      const got = storage.get('testValue')\n\n      // Then\n      expect(got).toEqual('test')\n    })\n  })\n\n  test('deletes the value if present', async () => {\n    await inTemporaryDirectory((cwd) => {\n      // Given\n      const storage = new LocalStorage<TestSchema>({cwd})\n\n      // When\n      storage.set('testValue', 'test')\n      const got = storage.get('testValue')\n      storage.delete('testValue')\n      const got2 = storage.get('testValue')\n\n      // Then\n      expect(got).toEqual('test')\n      expect(got2).toEqual(undefined)\n    })\n  })\n\n  test('clears all values', async () => {\n    await inTemporaryDirectory((cwd) => {\n      // Given\n      const storage = new LocalStorage<TestSchema>({cwd})\n\n      // When\n      storage.set('testValue', 'test')\n      const got = storage.get('testValue')\n      storage.delete('testValue')\n      const got2 = storage.clear()\n\n      // Then\n      expect(got).toEqual('test')\n      expect(got2).toEqual(undefined)\n    })\n  })\n})\n"]}