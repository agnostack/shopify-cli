{"version":3,"file":"metadata.test.js","sourceRoot":"","sources":["../../../src/public/node/metadata.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,8BAA8B,EAAC,MAAM,eAAe,CAAA;AAC5D,OAAO,KAAK,YAAY,MAAM,oBAAoB,CAAA;AAClD,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAC,MAAM,QAAQ,CAAA;AAEjD,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;AAE7B,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAI,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QACjC,MAAM,SAAS,GAAG,8BAA8B,EAO7C,CAAA;QAEH,MAAM,CAAC,SAAS,CAAC,oBAAoB,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;QACpD,MAAM,CAAC,SAAS,CAAC,uBAAuB,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;QAEvD,MAAM,SAAS,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC,CAAA;QACrD,MAAM,SAAS,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,GAAG,EAAE,OAAO,EAAC,CAAC,CAAC,CAAA;QAE5D,MAAM,GAAG,GAAG,SAAS,CAAC,oBAAoB,EAAE,CAAA;QAC5C,MAAM,SAAS,GAAG,SAAS,CAAC,uBAAuB,EAAE,CAAA;QACrD,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAA;QAC/B,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,EAAC,GAAG,EAAE,OAAO,EAAC,CAAC,CAAA;QAEzC,oCAAoC;QACpC,MAAM,SAAS,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC,CAAA;QACrD,MAAM,CAAC,SAAS,CAAC,oBAAoB,EAAE,CAAC,CAAC,OAAO,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAA;QAC5D,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAA;IACjC,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QACjC,MAAM,SAAS,GAAG,8BAA8B,EAO7C,CAAA;QAEH,uCAAuC;QACvC,MAAM,SAAS,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACrC,MAAM,IAAI,KAAK,EAAE,CAAA;QACnB,CAAC,EAAE,iBAAiB,CAAC,CAAA;QAErB,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,EAAE,CAAA;QAC1D,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC,SAAS,EAAE,CAAA;QAEtD,yBAAyB;QACzB,MAAM,MAAM,CACV,SAAS,CAAC,iBAAiB,CAAC,GAAG,EAAE;YAC/B,MAAM,IAAI,KAAK,EAAE,CAAA;QACnB,CAAC,EAAE,QAAQ,CAAC,CACb,CAAC,OAAO,CAAC,YAAY,EAAE,CAAA;QACxB,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAA;QAE9D,0CAA0C;QAC1C,MAAM,SAAS,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,EAAE,iBAAiB,CAAC,CAAA;QACxE,MAAM,CAAC,SAAS,CAAC,oBAAoB,EAAE,CAAC,CAAC,OAAO,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAA;IAC9D,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {createRuntimeMetadataContainer} from './metadata.js'\nimport * as errorHandler from './error-handler.js'\nimport {describe, expect, test, vi} from 'vitest'\n\nvi.mock('./error-handler.js')\n\ndescribe('runtime metadata', () => {\n  test('can manage data', async () => {\n    const container = createRuntimeMetadataContainer<\n      {\n        foo: number\n      },\n      {\n        bar: string\n      }\n    >()\n\n    expect(container.getAllPublicMetadata()).toEqual({})\n    expect(container.getAllSensitiveMetadata()).toEqual({})\n\n    await container.addPublicMetadata(() => ({foo: 123}))\n    await container.addSensitiveMetadata(() => ({bar: 'hello'}))\n\n    const pub = container.getAllPublicMetadata()\n    const sensitive = container.getAllSensitiveMetadata()\n    expect(pub).toEqual({foo: 123})\n    expect(sensitive).toEqual({bar: 'hello'})\n\n    // getAll returns a copy of the data\n    await container.addPublicMetadata(() => ({foo: 456}))\n    expect(container.getAllPublicMetadata()).toEqual({foo: 456})\n    expect(pub).toEqual({foo: 123})\n  })\n\n  test('can mute errors', async () => {\n    const container = createRuntimeMetadataContainer<\n      {\n        foo: number\n      },\n      {\n        bar: string\n      }\n    >()\n\n    // Mutes a thrown error, but reports it\n    await container.addPublicMetadata(() => {\n      throw new Error()\n    }, 'mute-and-report')\n\n    expect(errorHandler.sendErrorToBugsnag).toHaveBeenCalled()\n    vi.mocked(errorHandler.sendErrorToBugsnag).mockReset()\n\n    // Bubbles a thrown error\n    await expect(\n      container.addPublicMetadata(() => {\n        throw new Error()\n      }, 'bubble'),\n    ).rejects.toThrowError()\n    expect(errorHandler.sendErrorToBugsnag).not.toHaveBeenCalled()\n\n    // In mute mode, can handle setting values\n    await container.addPublicMetadata(() => ({foo: 123}), 'mute-and-report')\n    expect(container.getAllPublicMetadata()).toEqual({foo: 123})\n  })\n})\n"]}