{"version":3,"file":"monorail.test.js","sourceRoot":"","sources":["../../../src/public/node/monorail.test.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,WAAW,CAAA;AACjC,OAAO,EAAC,oBAAoB,EAAC,MAAM,eAAe,CAAA;AAClD,OAAO,EAAC,oBAAoB,EAAC,MAAM,qBAAqB,CAAA;AACxD,OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAC,MAAM,QAAQ,CAAA;AAExE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;AAEpB,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;IAC5D,MAAM,WAAW,GAAG,iDAAiD,CAAA;IACrE,MAAM,eAAe,GAAG;QACtB,cAAc,EAAE,iCAAiC;QACjD,qCAAqC,EAAE,eAAe;QACtD,kCAAkC,EAAE,eAAe;KACpD,CAAA;IAED,UAAU,CAAC,GAAG,EAAE;QACd,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,CAAA;QAC7B,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,iBAAiB,CAAC,EAAC,MAAM,EAAE,GAAG,EAAQ,CAAC,CAAA;IAC/D,CAAC,CAAC,CAAA;IAEF,SAAS,CAAC,GAAG,EAAE;QACb,EAAE,CAAC,aAAa,EAAE,CAAA;IACpB,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAC9D,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,EAAC,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,kBAAkB,EAAQ,CAAC,CAAA;QACjG,MAAM,UAAU,GAAG,oBAAoB,EAAE,CAAA;QACzC,MAAM,GAAG,GAAG,MAAM,oBAAoB,CAAC,iBAAiB,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC,EAAE,EAAE,CAAC,CAAA;QAC3E,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;QACjC,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,oDAAoD,CAAC,CAAA;IAC1F,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;QAClC,MAAM,GAAG,GAAG,MAAM,oBAAoB,CAAC,iBAAiB,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC,CAAA;QACrF,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QAC9B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAAC,WAAW,EAAE;YACnD,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC,SAAS,EAAE,iBAAiB,EAAE,OAAO,EAAE,EAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAC,EAAC,CAAC;YACvF,OAAO,EAAE,eAAe;SACzB,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import * as http from './http.js'\nimport {publishMonorailEvent} from './monorail.js'\nimport {mockAndCaptureOutput} from './testing/output.js'\nimport {afterEach, beforeEach, describe, expect, test, vi} from 'vitest'\n\nvi.mock('./http.js')\n\ndescribe('monorail', () => {\n  const currentDate = new Date(Date.UTC(2022, 1, 1, 10, 0, 0))\n  const expectedURL = 'https://monorail-edge.shopifysvc.com/v1/produce'\n  const expectedHeaders = {\n    'Content-Type': 'application/json; charset=utf-8',\n    'X-Monorail-Edge-Event-Created-At-Ms': '1643709600000',\n    'X-Monorail-Edge-Event-Sent-At-Ms': '1643709600000',\n  }\n\n  beforeEach(() => {\n    vi.setSystemTime(currentDate)\n    vi.mocked(http.fetch).mockResolvedValue({status: 200} as any)\n  })\n\n  afterEach(() => {\n    vi.useRealTimers()\n  })\n\n  test('shows an error if the Monorail request fails', async () => {\n    vi.mocked(http.fetch).mockResolvedValueOnce({status: 500, statusText: 'Monorail is down'} as any)\n    const outputMock = mockAndCaptureOutput()\n    const res = await publishMonorailEvent('fake_schema/0.0', {foo: 'bar'}, {})\n    expect(res.type).toEqual('error')\n    expect(outputMock.debug()).toMatch('Failed to report usage analytics: Monorail is down')\n  })\n\n  test('builds a request', async () => {\n    const res = await publishMonorailEvent('fake_schema/0.0', {foo: 'bar'}, {baz: 'abc'})\n    expect(res.type).toEqual('ok')\n    expect(http.fetch).toHaveBeenCalledWith(expectedURL, {\n      method: 'POST',\n      body: JSON.stringify({schema_id: 'fake_schema/0.0', payload: {foo: 'bar', baz: 'abc'}}),\n      headers: expectedHeaders,\n    })\n  })\n})\n"]}