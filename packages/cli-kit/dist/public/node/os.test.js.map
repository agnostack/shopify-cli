{"version":3,"file":"os.test.js","sourceRoot":"","sources":["../../../src/public/node/os.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,eAAe,EAAC,MAAM,SAAS,CAAA;AACvC,OAAO,EAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAC,MAAM,QAAQ,CAAA;AAEjD,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;AAEvB,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,IAAI,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACxD,OAAO;QACP,MAAM,GAAG,GAAG,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA;QAE5C,MAAM;QACN,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;QACtC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACnC,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACzD,OAAO;QACP,MAAM,GAAG,GAAG,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;QAE7C,MAAM;QACN,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;QACtC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IACjC,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC1C,OAAO;QACP,MAAM,GAAG,GAAG,eAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;QAE9C,MAAM;QACN,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;QACtC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACnC,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACtC,OAAO;QACP,MAAM,GAAG,GAAG,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;QAE7C,MAAM;QACN,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;QACvC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACnC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {platformAndArch} from './os.js'\nimport {describe, test, expect, vi} from 'vitest'\n\nvi.mock('node:process')\n\ndescribe('platformAndArch', () => {\n  test(\"returns the right architecture when it's x64\", () => {\n    // When\n    const got = platformAndArch('darwin', 'x64')\n\n    // Got\n    expect(got.platform).toEqual('darwin')\n    expect(got.arch).toEqual('amd64')\n  })\n\n  test(\"returns the right architecture when it's ia32\", () => {\n    // When\n    const got = platformAndArch('darwin', 'ia32')\n\n    // Got\n    expect(got.platform).toEqual('darwin')\n    expect(got.arch).toEqual('386')\n  })\n\n  test('returns the right architecture', () => {\n    // When\n    const got = platformAndArch('darwin', 'arm64')\n\n    // Got\n    expect(got.platform).toEqual('darwin')\n    expect(got.arch).toEqual('arm64')\n  })\n\n  test('returns the right platform', () => {\n    // When\n    const got = platformAndArch('win32', 'arm64')\n\n    // Got\n    expect(got.platform).toEqual('windows')\n    expect(got.arch).toEqual('arm64')\n  })\n})\n"]}