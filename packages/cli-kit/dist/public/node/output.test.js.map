{"version":3,"file":"output.test.js","sourceRoot":"","sources":["../../../src/public/node/output.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {outputToken, shouldDisplayColors} from './output.js'\nimport {describe, expect, test} from 'vitest'\n\ndescribe('Output helpers', () => {\n  test('can format dependency manager commands with flags', () => {\n    expect(outputToken.packagejsonScript('yarn', 'dev', '--reset').value).toEqual('yarn dev --reset')\n    expect(outputToken.packagejsonScript('npm', 'dev', '--reset').value).toEqual('npm run dev -- --reset')\n    expect(outputToken.packagejsonScript('pnpm', 'dev', '--reset').value).toEqual('pnpm dev --reset')\n  })\n  test('can format dependency manager commands without flags', () => {\n    expect(outputToken.packagejsonScript('yarn', 'dev').value).toEqual('yarn dev')\n    expect(outputToken.packagejsonScript('npm', 'dev').value).toEqual('npm run dev')\n    expect(outputToken.packagejsonScript('pnpm', 'dev').value).toEqual('pnpm dev')\n  })\n})\n\ndescribe('Color disabling', () => {\n  function processLike({env, stdoutIsTTY}: {env: {[variable: string]: string}; stdoutIsTTY: boolean}) {\n    const pseudoProcess = {\n      ...process,\n      env,\n      stdout: Object.create(process.stdout),\n    }\n    pseudoProcess.stdout.isTTY = stdoutIsTTY\n    return pseudoProcess\n  }\n\n  test('enables colors by default', () => {\n    expect(shouldDisplayColors(processLike({env: {}, stdoutIsTTY: true}))).toEqual(true)\n  })\n\n  test('disables colors when in a non-TTY environment', () => {\n    expect(shouldDisplayColors(processLike({env: {}, stdoutIsTTY: false}))).toEqual(false)\n  })\n\n  test('disables colors when FORCE_COLOR is truthy', () => {\n    expect(shouldDisplayColors(processLike({env: {FORCE_COLOR: '1'}, stdoutIsTTY: true}))).toEqual(true)\n  })\n\n  test('enables colors when FORCE_COLOR is falsy', () => {\n    expect(shouldDisplayColors(processLike({env: {FORCE_COLOR: '0'}, stdoutIsTTY: true}))).toEqual(false)\n  })\n\n  test('enables colors when FORCE_COLOR is truthy even in a non-TTY environment', () => {\n    expect(shouldDisplayColors(processLike({env: {FORCE_COLOR: '1'}, stdoutIsTTY: false}))).toEqual(true)\n  })\n})\n"]}