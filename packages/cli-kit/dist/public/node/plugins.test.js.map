{"version":3,"file":"plugins.test.js","sourceRoot":"","sources":["../../../src/public/node/plugins.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAC,MAAM,cAAc,CAAA;AACnD,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAC,MAAM,QAAQ,CAAA;AACjD,OAAO,EAAC,MAAM,EAAC,MAAM,aAAa,CAAA;AAElC,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAI,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACtE,QAAQ;QACR,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC,CAAA;QACrC,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,iBAAiB,CAAC,EAAC,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAQ,CAAC,CAAA;QAEjF,OAAO;QACP,MAAM,GAAG,GAAG,MAAM,sBAAsB,CAAC,MAAM,CAAC,CAAA;QAEhD,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAC,OAAO,EAAE,EAAE,EAAC,CAAC,CAAA;IACpC,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;QACpE,QAAQ;QACR,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC,CAAA;QACrC,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,iBAAiB,CAAC;YAC5C,SAAS,EAAE;gBACT,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,YAAY,EAAC,EAAE,MAAM,EAAE,EAAC,IAAI,EAAE,mBAAmB,EAAC,EAAC;gBACnE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,YAAY,EAAC,EAAE,MAAM,EAAE,EAAC,IAAI,EAAE,oBAAoB,EAAC,EAAC;aACrE;YAED,MAAM,EAAE,EAAE;SACJ,CAAC,CAAA;QAET,OAAO;QACP,MAAM,GAAG,GAAG,MAAM,sBAAsB,CAAC,MAAM,CAAC,CAAA;QAEhD,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAC,OAAO,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC,EAAE,KAAK,EAAE,+BAA+B,EAAC,CAAC,CAAA;IACtG,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAClD,QAAQ;QACR,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC,CAAA;QACrC,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,iBAAiB,CAAC;YAC5C,SAAS,EAAE;gBACT,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,YAAY,EAAC,EAAE,MAAM,EAAE,EAAC,IAAI,EAAE,mBAAmB,EAAC,EAAC;gBACnE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,OAAO,EAAC,EAAE,MAAM,EAAE,EAAC,IAAI,EAAE,cAAc,EAAC,EAAC;aAC1D;YACD,MAAM,EAAE,EAAE;SACJ,CAAC,CAAA;QAET,OAAO;QACP,MAAM,GAAG,GAAG,MAAM,sBAAsB,CAAC,MAAM,CAAC,CAAA;QAEhD,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAC,OAAO,EAAE,CAAC,YAAY,EAAE,OAAO,CAAC,EAAC,CAAC,CAAA;IACzD,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {getListOfTunnelPlugins} from './plugins.js'\nimport {describe, expect, test, vi} from 'vitest'\nimport {Config} from '@oclif/core'\n\ndescribe('getListOfTunnelPlugins', () => {\n  test('returns empty list when there are no tunnel plugins ', async () => {\n    // Given\n    const config = new Config({root: ''})\n    vi.spyOn(config, 'runHook').mockResolvedValue({successes: [], errors: []} as any)\n\n    // When\n    const got = await getListOfTunnelPlugins(config)\n\n    // Then\n    expect(got).toEqual({plugins: []})\n  })\n\n  test('returns error when there are duplicated providers ', async () => {\n    // Given\n    const config = new Config({root: ''})\n    vi.spyOn(config, 'runHook').mockResolvedValue({\n      successes: [\n        {result: {name: 'cloudflare'}, plugin: {name: 'plugin-cloudflare'}},\n        {result: {name: 'cloudflare'}, plugin: {name: 'another-cloudflare'}},\n      ],\n\n      errors: [],\n    } as any)\n\n    // When\n    const got = await getListOfTunnelPlugins(config)\n\n    // Then\n    expect(got).toEqual({plugins: ['cloudflare', 'cloudflare'], error: 'multiple-plugins-for-provider'})\n  })\n\n  test('returns list of tunnel providers', async () => {\n    // Given\n    const config = new Config({root: ''})\n    vi.spyOn(config, 'runHook').mockResolvedValue({\n      successes: [\n        {result: {name: 'cloudflare'}, plugin: {name: 'plugin-cloudflare'}},\n        {result: {name: 'ngrok'}, plugin: {name: 'plugin-ngrok'}},\n      ],\n      errors: [],\n    } as any)\n\n    // When\n    const got = await getListOfTunnelPlugins(config)\n\n    // Then\n    expect(got).toEqual({plugins: ['cloudflare', 'ngrok']})\n  })\n})\n"]}