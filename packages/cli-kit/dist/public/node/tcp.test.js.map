{"version":3,"file":"tcp.test.js","sourceRoot":"","sources":["../../../src/public/node/tcp.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,mBAAmB,EAAC,MAAM,UAAU,CAAA;AAC5C,OAAO,KAAK,MAAM,MAAM,aAAa,CAAA;AACrC,OAAO,EAAC,UAAU,EAAC,MAAM,YAAY,CAAA;AACrC,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAA;AACvC,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAC,MAAM,QAAQ,CAAA;AAEjD,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA;AAE1B,MAAM,YAAY,GAAG,gCAAgC,CAAA;AAErD,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;QAC3E,QAAQ;QACR,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,CAAA;QAC5E,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;QAClD,MAAM,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;QAE5C,OAAO;QACP,MAAM,GAAG,GAAG,MAAM,mBAAmB,EAAE,CAAA;QAEvC,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACnB,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,EAAE,CAAA;IAC3C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,6HAA6H,EAAE,KAAK,IAAI,EAAE;QAC7I,QAAQ;QACR,MAAM,QAAQ,GAAG,CAAC,CAAA;QAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;YACjC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,CAAA;SAC7E;QAED,YAAY;QACZ,MAAM,MAAM,CAAC,GAAG,EAAE,CAAC,mBAAmB,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC,CAAA;IAC9F,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {getAvailableTCPPort} from './tcp.js'\nimport * as system from './system.js'\nimport {AbortError} from './error.js'\nimport * as port from 'get-port-please'\nimport {describe, expect, test, vi} from 'vitest'\n\nvi.mock('get-port-please')\n\nconst errorMessage = 'Unable to generate random port'\n\ndescribe('getAvailableTCPPort', () => {\n  test('returns random port if the number retries is not exceeded', async () => {\n    // Given\n    vi.mocked(port.getRandomPort).mockRejectedValueOnce(new Error(errorMessage))\n    vi.mocked(port.getRandomPort).mockResolvedValue(5)\n    const debugError = vi.spyOn(system, 'sleep')\n\n    // When\n    const got = await getAvailableTCPPort()\n\n    // Then\n    expect(got).toBe(5)\n    expect(debugError).toHaveBeenCalledOnce()\n  })\n\n  test('throws an abort exception with same error message received from third party getRandomPort if the number retries is exceeded', async () => {\n    // Given\n    const maxTries = 5\n    for (let i = 0; i < maxTries; i++) {\n      vi.mocked(port.getRandomPort).mockRejectedValueOnce(new Error(errorMessage))\n    }\n\n    // When/Then\n    await expect(() => getAvailableTCPPort()).rejects.toThrowError(new AbortError(errorMessage))\n  })\n})\n"]}