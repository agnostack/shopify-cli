{"version":3,"file":"ui.test.js","sourceRoot":"","sources":["../../../src/public/node/ui.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {renderConcurrent, renderFatalError, renderInfo, renderSuccess, renderTasks, renderWarning} from './ui.js'\nimport {AbortSignal} from './abort.js'\nimport {BugError, FatalError, AbortError} from './error.js'\nimport {mockAndCaptureOutput} from './testing/output.js'\nimport {afterEach, describe, expect, test} from 'vitest'\nimport {Writable} from 'stream'\n\nafterEach(() => {\n  mockAndCaptureOutput().clear()\n})\n\ndescribe('renderInfo', async () => {\n  test('renders info inside a banner', async () => {\n    // Given\n    const mockOutput = mockAndCaptureOutput()\n\n    // When\n    renderInfo({\n      headline: 'Title.',\n      body: 'Body',\n      nextSteps: [\n        [\n          'Run',\n          {\n            command: 'cd santorini-goods',\n          },\n        ],\n        [\n          'To preview your project, run',\n          {\n            command: 'npm app dev',\n          },\n        ],\n        [\n          'To add extensions, run',\n          {\n            command: 'npm generate extension',\n          },\n        ],\n      ],\n      reference: [\n        [\n          'Run',\n          {\n            command: 'npm shopify help',\n          },\n        ],\n        [\n          // testing link wrapping behavior\n          \"Press 'return' to open the really amazing and clean\",\n          {\n            link: {\n              label: 'dev docs',\n              url: 'https://shopify.dev',\n            },\n          },\n        ],\n      ],\n      link: {\n        label: 'Link',\n        url: 'https://shopify.com',\n      },\n      customSections: [\n        {\n          title: 'Custom section',\n          body: {\n            list: {\n              items: ['Item 1', 'Item 2', 'Item 3'],\n            },\n          },\n        },\n        {\n          title: 'Custom section 2',\n          body: {\n            list: {\n              items: ['Item 1', 'Item 2', 'Item 3'],\n            },\n          },\n        },\n      ],\n    })\n\n    // Then\n    expect(mockOutput.info()).toMatchInlineSnapshot(`\n      \"╭─ info ───────────────────────────────────────────────────────────────────────╮\n      │                                                                              │\n      │  Title.                                                                      │\n      │                                                                              │\n      │  Body                                                                        │\n      │                                                                              │\n      │  Next steps                                                                  │\n      │    • Run \\`cd santorini-goods\\`                                                │\n      │    • To preview your project, run \\`npm app dev\\`                              │\n      │    • To add extensions, run \\`npm generate extension\\`                         │\n      │                                                                              │\n      │  Reference                                                                   │\n      │    • Run \\`npm shopify help\\`                                                  │\n      │    • Press 'return' to open the really amazing and clean dev docs [1]        │\n      │                                                                              │\n      │  Link [2]                                                                    │\n      │                                                                              │\n      │  Custom section                                                              │\n      │    • Item 1                                                                  │\n      │    • Item 2                                                                  │\n      │    • Item 3                                                                  │\n      │                                                                              │\n      │  Custom section 2                                                            │\n      │    • Item 1                                                                  │\n      │    • Item 2                                                                  │\n      │    • Item 3                                                                  │\n      │                                                                              │\n      ╰──────────────────────────────────────────────────────────────────────────────╯\n      [1] https://shopify.dev\n      [2] https://shopify.com\n      \"\n    `)\n  })\n})\n\ndescribe('renderSuccess', async () => {\n  test('renders a success message inside a banner', async () => {\n    // Given\n    const mockOutput = mockAndCaptureOutput()\n\n    // When\n    renderSuccess({\n      headline: 'Title.',\n    })\n\n    // Then\n    expect(mockOutput.info()).toMatchInlineSnapshot(`\n      \"╭─ success ────────────────────────────────────────────────────────────────────╮\n      │                                                                              │\n      │  Title.                                                                      │\n      │                                                                              │\n      ╰──────────────────────────────────────────────────────────────────────────────╯\n      \"\n    `)\n  })\n})\n\ndescribe('renderWarning', async () => {\n  test('renders a warning inside a banner with good wrapping', async () => {\n    // Given\n    const mockOutput = mockAndCaptureOutput()\n\n    // When\n    renderWarning({\n      headline: 'Title.',\n      reference: [\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',\n        'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n      ],\n      nextSteps: ['First', 'Second'],\n      orderedNextSteps: true,\n    })\n\n    // Then\n    expect(mockOutput.warn()).toMatchInlineSnapshot(`\n      \"╭─ warning ────────────────────────────────────────────────────────────────────╮\n      │                                                                              │\n      │  Title.                                                                      │\n      │                                                                              │\n      │  Next steps                                                                  │\n      │    1. First                                                                  │\n      │    2. Second                                                                 │\n      │                                                                              │\n      │  Reference                                                                   │\n      │    • Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do         │\n      │      eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad  │\n      │       minim veniam, quis nostrud exercitation ullamco laboris nisi ut        │\n      │      aliquip ex ea commodo consequat.                                        │\n      │    • Duis aute irure dolor in reprehenderit in voluptate velit esse cillum   │\n      │      dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non  │\n      │       proident, sunt in culpa qui officia deserunt mollit anim id est        │\n      │      laborum.                                                                │\n      │                                                                              │\n      ╰──────────────────────────────────────────────────────────────────────────────╯\n      \"\n    `)\n  })\n})\n\ndescribe('renderFatalError', async () => {\n  test('renders a fatal error inside a banner', async () => {\n    // Given\n    const mockOutput = mockAndCaptureOutput()\n\n    // When\n    renderFatalError(\n      new AbortError(\n        \"Couldn't connect to the Shopify Partner Dashboard.\",\n        'Check your internet connection and try again.',\n      ),\n    )\n\n    // Then\n    expect(mockOutput.error()).toMatchInlineSnapshot(`\n      \"╭─ error ──────────────────────────────────────────────────────────────────────╮\n      │                                                                              │\n      │  Couldn't connect to the Shopify Partner Dashboard.                          │\n      │                                                                              │\n      │  Check your internet connection and try again.                               │\n      │                                                                              │\n      ╰──────────────────────────────────────────────────────────────────────────────╯\n      \"\n    `)\n  })\n\n  test('renders a fatal error inside a banner with a stack trace', async () => {\n    // Given\n    const mockOutput = mockAndCaptureOutput()\n\n    // When\n    const error = new BugError('Unexpected error')\n    error.stack = `\n      Error: Unexpected error\n          at Module._compile (internal/modules/cjs/loader.js:1137:30)\n          at Object.Module._extensions..js (internal/modules/cjs/loader.js:1157:10)\n          at Module.load (internal/modules/cjs/loader.js:985:32)\n          at Function.Module._load (internal/modules/cjs/loader.js:878:14)\n    `\n    renderFatalError(error)\n\n    // Then\n    expect(mockOutput.error()).toMatchInlineSnapshot(`\n      \"╭─ error ──────────────────────────────────────────────────────────────────────╮\n      │                                                                              │\n      │  Unexpected error                                                            │\n      │                                                                              │\n      │  To investigate the issue, examine this stack trace:                         │\n      │    at _compile (internal/modules/cjs/loader.js:1137)                         │\n      │    at js (internal/modules/cjs/loader.js:1157)                               │\n      │    at load (internal/modules/cjs/loader.js:985)                              │\n      │    at _load (internal/modules/cjs/loader.js:878)                             │\n      │                                                                              │\n      ╰──────────────────────────────────────────────────────────────────────────────╯\n      \"\n    `)\n  })\n\n  test('renders a fatal error inside a banner with some next steps', async () => {\n    // Given\n    const mockOutput = mockAndCaptureOutput()\n\n    const nextSteps = [\n      [\n        'Have you',\n        {\n          link: {\n            label: 'created a Shopify Partners organization',\n            url: 'https://partners.shopify.com/signup',\n          },\n        },\n        {\n          char: '?',\n        },\n      ],\n      'Have you confirmed your accounts from the emails you received?',\n      [\n        'Need to connect to a different App or organization? Run the command again with',\n        {\n          command: '--reset',\n        },\n      ],\n    ]\n\n    // When\n    const error = new AbortError('No Organization found', undefined, nextSteps)\n    renderFatalError(error)\n\n    // Then\n    expect(mockOutput.error()).toMatchInlineSnapshot(`\n      \"╭─ error ──────────────────────────────────────────────────────────────────────╮\n      │                                                                              │\n      │  No Organization found                                                       │\n      │                                                                              │\n      │  Next steps                                                                  │\n      │    • Have you created a Shopify Partners organization [1]?                   │\n      │    • Have you confirmed your accounts from the emails you received?          │\n      │    • Need to connect to a different App or organization? Run the command     │\n      │      again with \\`--reset\\`                                                    │\n      │                                                                              │\n      ╰──────────────────────────────────────────────────────────────────────────────╯\n      [1] https://partners.shopify.com/signup\n      \"\n    `)\n  })\n})\n\ndescribe('renderConcurrent', async () => {\n  test('renders an error message correctly when a process throws an error', async () => {\n    // Given\n    const mockOutput = mockAndCaptureOutput()\n\n    // When\n    const throwingProcess = {\n      prefix: 'backend',\n      action: async (_stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        throw new Error('example error')\n      },\n    }\n\n    try {\n      await renderConcurrent({processes: [throwingProcess]})\n      // eslint-disable-next-line no-catch-all/no-catch-all\n    } catch (error) {\n      renderFatalError(error as FatalError)\n    }\n\n    // Then\n    expect(mockOutput.error()).toMatchInlineSnapshot(`\n      \"╭─ error ──────────────────────────────────────────────────────────────────────╮\n      │                                                                              │\n      │  example error                                                               │\n      │                                                                              │\n      ╰──────────────────────────────────────────────────────────────────────────────╯\n      \"\n    `)\n  })\n})\n\ndescribe('renderTasks', async () => {\n  test('renders an error message correctly when the task throws an error', async () => {\n    // Given\n    const mockOutput = mockAndCaptureOutput()\n\n    // When\n    const throwingTask = {\n      title: 'throwing task',\n      task: async () => {\n        throw new Error('example error')\n      },\n    }\n\n    try {\n      await renderTasks([throwingTask])\n      // eslint-disable-next-line no-catch-all/no-catch-all\n    } catch (error: any) {\n      renderWarning({headline: error.message})\n    }\n\n    // Then\n    expect(mockOutput.warn()).toMatchInlineSnapshot(`\n      \"╭─ warning ────────────────────────────────────────────────────────────────────╮\n      │                                                                              │\n      │  example error                                                               │\n      │                                                                              │\n      ╰──────────────────────────────────────────────────────────────────────────────╯\n      \"\n    `)\n  })\n})\n"]}