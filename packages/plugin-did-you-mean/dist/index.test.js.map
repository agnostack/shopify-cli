{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../src/index.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAE,gBAAgB,EAAC,MAAM,YAAY,CAAA;AACnE,OAAO,EAAC,oBAAoB,EAAC,MAAM,oBAAoB,CAAA;AACvD,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAC,MAAM,QAAQ,CAAA;AACjD,OAAO,EAAC,wBAAwB,EAAC,MAAM,0BAA0B,CAAA;AAWjE,SAAS,WAAW,CAAC,QAA4D;IAC/E,OAAO;QACL,UAAU,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC;QACzC,QAAQ;KACT,CAAA;AACH,CAAC;AAED,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;AAC7B,EAAE,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAA;AAEnC,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACpC,QAAQ;QACR,MAAM,MAAM,GAAW,WAAW,CAAC;YACjC;gBACE,EAAE,EAAE,SAAS;gBACb,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE;aACZ;SACF,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,GAAG,GAAG,sBAAsB,CAAC;YACjC,EAAE,EAAE,QAAQ;YACZ,IAAI,EAAE,EAAE;YACR,MAAM,EAAE,MAAa;SACtB,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC7B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACvC,QAAQ;QACR,MAAM,MAAM,GAAW,WAAW,CAAC;YACjC;gBACE,EAAE,EAAE,SAAS;gBACb,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE;aACZ;SACF,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,GAAG,GAAG,sBAAsB,CAAC;YACjC,EAAE,EAAE,2BAA2B;YAC/B,IAAI,EAAE,EAAE;YACR,MAAM,EAAE,MAAa;SACtB,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAA;IAC7B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACtE,QAAQ;QACR,MAAM,MAAM,GAAW,WAAW,CAAC;YACjC;gBACE,EAAE,EAAE,wBAAwB;gBAC5B,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE;aACZ;SACF,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,GAAG,GAAG,sBAAsB,CAAC;YACjC,EAAE,EAAE,uBAAuB;YAC3B,IAAI,EAAE,EAAE;YACR,MAAM,EAAE,MAAa;SACtB,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAA;IAC5C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC/D,QAAQ;QACR,MAAM,MAAM,GAAW,WAAW,CAAC;YACjC;gBACE,EAAE,EAAE,wBAAwB;gBAC5B,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE;aACZ;SACF,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,GAAG,GAAG,sBAAsB,CAAC;YACjC,EAAE,EAAE,wBAAwB;YAC5B,IAAI,EAAE,EAAE;YACR,MAAM,EAAE,MAAa;SACtB,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAA;IAC5C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC5C,QAAQ;QACR,MAAM,MAAM,GAAW,WAAW,CAAC;YACjC;gBACE,EAAE,EAAE,SAAS;gBACb,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE;aACZ;SACF,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,GAAG,GAAG,sBAAsB,CAAC;YACjC,EAAE,EAAE,GAAG;YACP,IAAI,EAAE,EAAE;YACR,MAAM,EAAE,MAAa;SACtB,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAA;IAC7B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,uEAAuE,EAAE,GAAG,EAAE;QACjF,QAAQ;QACR,MAAM,MAAM,GAAW,WAAW,CAAC;YACjC;gBACE,EAAE,EAAE,MAAM;gBACV,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE;aACZ;SACF,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,GAAG,GAAG,sBAAsB,CAAC;YACjC,EAAE,EAAE,MAAM;YACV,IAAI,EAAE,EAAE;YACR,MAAM,EAAE,MAAa;SACtB,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAA;IAC7B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACxD,QAAQ;QACR,EAAE,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAA;QAErD,OAAO;QACP,MAAM,GAAG,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;QAErD,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAA;QACxB,MAAM,CAAC,wBAAwB,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAA;IACnD,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;QAC3E,QAAQ;QACR,EAAE,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAA;QACtD,EAAE,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;QAE3D,OAAO;QACP,MAAM,GAAG,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;QAErD,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAA;QACxB,MAAM,CAAC,wBAAwB,CAAC,CAAC,UAAU,EAAE,CAAA;IAC/C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,iEAAiE,EAAE,GAAG,EAAE;QAC3E,QAAQ;QACR,MAAM,MAAM,GAAW,WAAW,CAAC;YACjC;gBACE,EAAE,EAAE,wBAAwB;gBAC5B,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE;aACZ;YACD;gBACE,EAAE,EAAE,WAAW;gBACf,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE;aACZ;SACF,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,GAAG,GAAG,sBAAsB,CAAC;YACjC,EAAE,EAAE,oBAAoB;YACxB,IAAI,EAAE,EAAE;YACR,MAAM,EAAE,MAAa;SACtB,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAA;IAC5C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACzD,QAAQ;QACR,MAAM,MAAM,GAAW,WAAW,CAAC;YACjC;gBACE,EAAE,EAAE,oBAAoB;gBACxB,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE;aACZ;YACD;gBACE,EAAE,EAAE,WAAW;gBACf,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE;aACZ;YACD;gBACE,EAAE,EAAE,OAAO;gBACX,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE;aACZ;SACF,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,GAAG,GAAG,sBAAsB,CAAC;YACjC,EAAE,EAAE,OAAO;YACX,IAAI,EAAE,EAAE;YACR,MAAM,EAAE,MAAa;SACtB,CAAC,CAAA;QAEF,OAAO;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;IAC/B,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {findAlternativeCommand, shouldRunCommand} from './index.js'\nimport {isAutocorrectEnabled} from './services/conf.js'\nimport {describe, expect, vi, test} from 'vitest'\nimport {renderConfirmationPrompt} from '@shopify/cli-kit/node/ui'\n\ninterface Config {\n  commandIDs: string[]\n  commands: {\n    id: string\n    hidden: boolean\n    aliases: string[]\n  }[]\n}\n\nfunction buildConfig(commands: {id: string; hidden: boolean; aliases: string[]}[]): Config {\n  return {\n    commandIDs: commands.map((cmd) => cmd.id),\n    commands,\n  }\n}\n\nvi.mock('./services/conf.js')\nvi.mock('@shopify/cli-kit/node/ui')\n\ndescribe('commandNotFound hook', () => {\n  test('returns a probable match', () => {\n    // Given\n    const config: Config = buildConfig([\n      {\n        id: 'version',\n        hidden: false,\n        aliases: [],\n      },\n    ])\n\n    // When\n    const got = findAlternativeCommand({\n      id: 'vesion',\n      argv: [],\n      config: config as any,\n    })\n\n    // Then\n    expect(got).toBe('version')\n  })\n\n  test('gives up if nothing matches', () => {\n    // Given\n    const config: Config = buildConfig([\n      {\n        id: 'version',\n        hidden: false,\n        aliases: [],\n      },\n    ])\n\n    // When\n    const got = findAlternativeCommand({\n      id: 'i-like-to-move-it-move-it',\n      argv: [],\n      config: config as any,\n    })\n\n    // Then\n    expect(got).toBeUndefined()\n  })\n\n  test('returns a match when the command is made of multiple words', () => {\n    // Given\n    const config: Config = buildConfig([\n      {\n        id: 'app:generate:extension',\n        hidden: false,\n        aliases: [],\n      },\n    ])\n\n    // When\n    const got = findAlternativeCommand({\n      id: 'app:generate:xtension',\n      argv: [],\n      config: config as any,\n    })\n\n    // Then\n    expect(got).toBe('app:generate:extension')\n  })\n\n  test('returns a match when the command in the wrong order', () => {\n    // Given\n    const config: Config = buildConfig([\n      {\n        id: 'app:generate:extension',\n        hidden: false,\n        aliases: [],\n      },\n    ])\n\n    // When\n    const got = findAlternativeCommand({\n      id: 'app:extension:generate',\n      argv: [],\n      config: config as any,\n    })\n\n    // Then\n    expect(got).toBe('app:generate:extension')\n  })\n\n  test('gives up if command is too short', () => {\n    // Given\n    const config: Config = buildConfig([\n      {\n        id: 'version',\n        hidden: false,\n        aliases: [],\n      },\n    ])\n\n    // When\n    const got = findAlternativeCommand({\n      id: 'v',\n      argv: [],\n      config: config as any,\n    })\n\n    // Then\n    expect(got).toBeUndefined()\n  })\n\n  test('gives up if command does not share any bigram with available commands', () => {\n    // Given\n    const config: Config = buildConfig([\n      {\n        id: 'help',\n        hidden: false,\n        aliases: [],\n      },\n    ])\n\n    // When\n    const got = findAlternativeCommand({\n      id: 'vers',\n      argv: [],\n      config: config as any,\n    })\n\n    // Then\n    expect(got).toBeUndefined()\n  })\n\n  test('should run command if isActive is true', async () => {\n    // Given\n    vi.mocked(isAutocorrectEnabled).mockReturnValue(true)\n\n    // When\n    const got = await shouldRunCommand('version', 'vers')\n\n    // Then\n    expect(got).toBeTruthy()\n    expect(renderConfirmationPrompt).not.toBeCalled()\n  })\n\n  test('should call renderConfirmationPrompt if isActive is false', async () => {\n    // Given\n    vi.mocked(isAutocorrectEnabled).mockReturnValue(false)\n    vi.mocked(renderConfirmationPrompt).mockResolvedValue(true)\n\n    // When\n    const got = await shouldRunCommand('version', 'vers')\n\n    // Then\n    expect(got).toBeTruthy()\n    expect(renderConfirmationPrompt).toBeCalled()\n  })\n\n  test('prefers commands that have more in common with the user command', () => {\n    // Given\n    const config: Config = buildConfig([\n      {\n        id: 'app:generate:extension',\n        hidden: false,\n        aliases: [],\n      },\n      {\n        id: 'extension',\n        hidden: false,\n        aliases: [],\n      },\n    ])\n\n    // When\n    const got = findAlternativeCommand({\n      id: 'extension:generate',\n      argv: [],\n      config: config as any,\n    })\n\n    // Then\n    expect(got).toBe('app:generate:extension')\n  })\n\n  test('when score is equal, prefers shorter commands', () => {\n    // Given\n    const config: Config = buildConfig([\n      {\n        id: 'app:function:build',\n        hidden: false,\n        aliases: [],\n      },\n      {\n        id: 'app:build',\n        hidden: false,\n        aliases: [],\n      },\n      {\n        id: 'guild',\n        hidden: false,\n        aliases: [],\n      },\n    ])\n\n    // When\n    const got = findAlternativeCommand({\n      id: 'build',\n      argv: [],\n      config: config as any,\n    })\n\n    // Then\n    expect(got).toBe('app:build')\n  })\n})\n"]}